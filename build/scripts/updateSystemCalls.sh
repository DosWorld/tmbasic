#!/bin/bash
# Updates initSystemCalls.cpp.
# Run from the root /code dir.

OUTFILE=src/vm/initSystemCalls.cpp
SYSTEM_CALLS=$(grep --only-matching --perl-regexp --no-filename 'void systemCall\K[^()]*' src/vm/systemCall*.cpp | sort)

echo '// This file is auto-generated by build/scripts/updateSystemCalls.sh' > $OUTFILE
echo '// Do not update manually!' >> $OUTFILE
echo >> $OUTFILE
echo '#include "vm/initSystemCalls.h"' >> $OUTFILE
echo '#include "vm/systemCall.h"' >> $OUTFILE
echo >> $OUTFILE
echo 'namespace vm {' >> $OUTFILE
echo >> $OUTFILE
echo '// NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)' >> $OUTFILE
echo 'static bool _systemCallsInitialized = false;' >> $OUTFILE
echo >> $OUTFILE
echo $SYSTEM_CALLS | awk 'BEGIN { RS = " " } { print "void systemCall" $1 "(const SystemCallInput&, SystemCallResult*);" }' >> $OUTFILE
echo >> $OUTFILE
echo 'void initSystemCalls() {' >> $OUTFILE
echo '    if (_systemCallsInitialized) {' >> $OUTFILE
echo '        return;' >> $OUTFILE
echo '    }' >> $OUTFILE
echo $SYSTEM_CALLS | awk 'BEGIN { RS = " " } { print "    initSystemCall(SystemCall::k" $1 ", systemCall" $1 ");" }' >> $OUTFILE
echo '    _systemCallsInitialized = true;' >> $OUTFILE
echo '}' >> $OUTFILE
echo >> $OUTFILE
echo '}  // namespace vm' >> $OUTFILE

OUTFILE=src/vm/SystemCalls.h

echo '// This file is auto-generated by build/scripts/updateSystemCalls.sh' > $OUTFILE
echo '// Do not update manually!' >> $OUTFILE
echo >> $OUTFILE
echo '#pragma once' >> $OUTFILE
echo >> $OUTFILE
echo 'namespace vm {' >> $OUTFILE
echo >> $OUTFILE
echo '// This enum is big enough that it requires NAMEOF_ENUM_RANGE_MAX to be increased.' >> $OUTFILE
echo 'enum class SystemCall {' >> $OUTFILE
echo $SYSTEM_CALLS | awk 'BEGIN { RS = " " } { print "    k" $1 "," }' >> $OUTFILE
echo >> $OUTFILE
echo '    // Not a real system call. Used to get the number of system calls.' >> $OUTFILE
echo '    kMaxSystemCall,' >> $OUTFILE
echo '};' >> $OUTFILE
echo >> $OUTFILE
echo '}  // namespace vm' >> $OUTFILE
