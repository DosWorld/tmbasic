FROM archlinux:latest

RUN mkdir -p /code && \
    groupadd -g $HOST_GID $USER && \
    useradd -r -u $HOST_UID -g $HOST_GID $USER && \
    chown $HOST_UID:$HOST_GID /code && \
    mkdir -p /home/$USER && \
    chown $HOST_UID:$HOST_GID /home/$USER

RUN echo "[multilib]" >> /etc/pacman.conf && \
    echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf && \
    echo "Server = https://iad.mirror.rackspace.com/archlinux/_repo/os/_arch" | tr '_' '$' > /etc/pacman.d/mirrorlist && \
    pacman -Syy --noconfirm && \
    pacman -Syu --noconfirm && \
    pacman -S --noconfirm \
        make \
        git \
        cmake \
        mingw-w64 \
        wine \
        unzip \
        xxd \
        diffutils \
        base-devel \
        dos2unix

# ncurses
RUN curl -L -o /tmp/ncurses.tar.gz https://invisible-mirror.net/archives/ncurses/ncurses-6.2.tar.gz && \
    cd /tmp && \
    tar zxf ncurses.tar.gz && \
    mv ncurses-*/ ncurses/ && \
    cd ncurses && \
    ./configure \
        --host=$ARCH-w64-mingw32 \
        --without-ada \
        --with-static \
        --with-normal \
        --without-debug \
        --disable-relink \
        --disable-rpath \
        --with-ticlib \
        --without-termlib \
        --enable-widec \
        --enable-ext-colors \
        --enable-ext-mouse \
        --enable-sp-funcs \
        --with-wrap-prefix=ncwrap_ \
        --enable-sigwinch \
        --enable-term-driver \
        --enable-colorfgbg \
        --enable-tcap-names \
        --disable-termcap \
        --disable-mixed-case \
        --with-pkg-config \
        --enable-pc-files \
        --enable-echo \
        --with-build-cflags=-D_XOPEN_SOURCE_EXTENDED \
        --without-progs \
        --without-tests \
        --prefix=/usr/$ARCH-w64-mingw32 \
        --without-cxx-binding \
        --disable-home-terminfo \
        --enable-interop \
        && \
    make -j4 && \
    make install && \
    rm -rf /tmp/ncurses.tar.gz /tmp/ncurses/

# gtest
COPY toolchain-cross-mingw64-linux-$ARCH.cmake /tmp/
RUN curl -L -o /tmp/gtest.zip https://github.com/google/googletest/archive/release-1.10.0.zip && \
    cd /tmp && \
    unzip gtest.zip && \
    mv googletest-* googletest && \
    cd googletest && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DCMAKE_PREFIX_PATH=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_INSTALL_PREFIX=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain-cross-mingw64-linux-$ARCH.cmake \
        && \
    make -j4 && \
    make install && \
    rm -rf /tmp/gtest.zip /tmp/googletest/

# gtest - why are these declarations from <io.h> needed? gtest header fails when included in tmbasic otherwise
RUN echo "static int _isatty(int) { return 0; }" >> /usr/$ARCH-w64-mingw32/include/gtest/internal/custom/gtest-port.h && \
    echo "static int read(int,void*,unsigned int) { return 0; }" >> /usr/$ARCH-w64-mingw32/include/gtest/internal/custom/gtest-port.h && \
    echo "static int write(int,const void*,unsigned int) { return 0; }" >> /usr/$ARCH-w64-mingw32/include/gtest/internal/custom/gtest-port.h && \
    echo "static int close(int) { return 0; }" >> /usr/$ARCH-w64-mingw32/include/gtest/internal/custom/gtest-port.h

# bzip2
RUN curl -L -o /tmp/bzip2.zip https://gitlab.com/federicomenaquintero/bzip2/-/archive/6211b6500c8bec13a17707440d3a84ca8b34eed5/bzip2-6211b6500c8bec13a17707440d3a84ca8b34eed5.zip && \
    cd /tmp && \
    unzip -q bzip2.zip && \
    mv bzip2-*/ bzip2/ && \
    mkdir -p bzip2/build-linux && \
    cd bzip2/build-linux && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j4 && \
    make install && \
    mkdir -p /tmp/bzip2/build-win && \
    cd /tmp/bzip2/build-win && \
    cmake .. \
        -DENABLE_STATIC_LIB=ON \
        -DCMAKE_PREFIX_PATH=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_INSTALL_PREFIX=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain-cross-mingw64-linux-$ARCH.cmake \
        && \
    make -j4 && \
    make install && \
    rm -rf /tmp/bzip2.zip /tmp/bzip2/

# bsdiff
RUN curl -L -o /tmp/bsdiff.zip https://github.com/mendsley/bsdiff/archive/b817e9491cf7b8699c8462ef9e2657ca4ccd7667.zip && \
    cd /tmp && \
    unzip -q bsdiff.zip && \
    mv bsdiff-*/ bsdiff/ && \
    cd bsdiff && \
    gcc -o bsdiff bsdiff.c -DBSDIFF_EXECUTABLE -lbz2 && \
    gcc -o bspatch bspatch.c -DBSPATCH_EXECUTABLE -lbz2 && \
    mv bsdiff bspatch /usr/bin/ && \
    $ARCH-w64-mingw32-gcc -c bsdiff.c && \
    $ARCH-w64-mingw32-ar rcs libbsdiff.a bsdiff.o && \
    mv libbsdiff.a /usr/$ARCH-w64-mingw32/lib/ && \
    $ARCH-w64-mingw32-gcc -c bspatch.c && \
    $ARCH-w64-mingw32-ar rcs libbspatch.a bspatch.o && \
    mv libbspatch.a /usr/$ARCH-w64-mingw32/lib/ && \
    mkdir -p /usr/$ARCH-w64-mingw32/include/bsdiff && \
    cp *.h /usr/$ARCH-w64-mingw32/include/bsdiff/ && \
    rm -rf /tmp/bsdiff.zip /tmp/bsdiff/

# icu
RUN curl -L -o /tmp/icu.tar.gz https://github.com/unicode-org/icu/releases/download/release-68-2/icu4c-68_2-src.tgz && \
    cd /tmp && \
    tar zxf icu.tar.gz && \
    mv icu icu-linux && \
    cd icu-linux/source && \
    CXXFLAGS="-DU_USING_ICU_NAMESPACE=0 -DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=1 -DU_HIDE_OBSOLETE_UTF_OLD_H=1 -std=c++17" \
        ./runConfigureICU "Linux/gcc" --enable-static --disable-shared --disable-tests --disable-samples \
        --with-data-packaging=static && \
    make -j4 && \
    make install

RUN cd /tmp && \
    tar zxf /tmp/icu.tar.gz && \
    cd icu/source && \
    CXXFLAGS="-DU_USING_ICU_NAMESPACE=0 -DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=1 -DU_HIDE_OBSOLETE_UTF_OLD_H=1 -std=c++17" \
        LDFLAGS="-L/tmp/icu/source/lib" \
        ./runConfigureICU "MinGW" --enable-static --enable-shared --disable-tests --disable-samples \
        --with-data-packaging=static \
        --host=$ARCH-w64-mingw32 --with-cross-build=/tmp/icu-linux/source/ --prefix=/usr/$ARCH-w64-mingw32 && \
    make -j4 && \
    make install && \
    rm -rf /tmp/icu.tar.gz /tmp/icu-linux/ /tmp/icu/

# fmt
RUN curl -L -o /tmp/fmt.zip https://github.com/fmtlib/fmt/releases/download/7.1.3/fmt-7.1.3.zip && \
    cd /tmp && \
    unzip -q fmt.zip && \
    mv fmt-*/ fmt/ && \
    mkdir -p fmt/build && \
    cd fmt/build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DFMT_TEST=OFF -DFMT_FUZZ=OFF -DFMT_CUDA_TEST=OFF -DFMT_DOC=OFF \
        -DCMAKE_PREFIX_PATH=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_INSTALL_PREFIX=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain-cross-mingw64-linux-$ARCH.cmake \
        && \
    make -j4 && \
    make install && \
    rm -rf /tmp/fmt.zip /tmp/fmt/

# libclipboard
RUN curl -L -o /tmp/libclipboard.zip https://github.com/jtanx/libclipboard/archive/refs/tags/v1.1.zip && \
    cd /tmp && \
    unzip -q libclipboard.zip && \
    mv libclipboard-*/ libclipboard/ && \
    mkdir -p libclipboard/build && \
    cd libclipboard/build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_PREFIX_PATH=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_INSTALL_PREFIX=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain-cross-mingw64-linux-$ARCH.cmake \
        && \
    make -j4 && \
    make install && \
    rm -rf /tmp/libclipboard.zip /tmp/libclipboard/

# immer
RUN curl -L -o /tmp/immer.zip https://github.com/arximboldi/immer/archive/4d1caac17daaea58b949e30c6b1d5d5b88a3b78e.zip && \
    cd /tmp && \
    unzip -q immer.zip && \
    mv immer-*/ immer/ && \
    mkdir -p immer/build && \
    cd immer/build && \
    cmake .. \
        -DCMAKE_PREFIX_PATH=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_INSTALL_PREFIX=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain-cross-mingw64-linux-$ARCH.cmake \
        && \
    make -j4 && \
    make install && \
    rm -rf /tmp/immer.zip /tmp/immer/

# boost
RUN curl -L -o /tmp/boost.tar.gz https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.gz && \
    cd /tmp && \
    tar zxf boost.tar.gz && \
    mv boost_*/boost /usr/include/ && \
    ln -s /usr/include/boost /usr/$ARCH-w64-mingw32/include/boost && \
    rm -rf /tmp/boost.tar.gz /tmp/boost_*/

# mpdecimal
RUN curl -L -o /tmp/mpdecimal.tar.gz https://www.bytereef.org/software/mpdecimal/releases/mpdecimal-2.5.1.tar.gz && \
    cd /tmp && \
    tar zxf mpdecimal.tar.gz && \
    cd mpdecimal-*/ && \
    ./configure --host=$ARCH-w64-mingw32 && \
    cd libmpdec && \
    make libmpdec.a -j4 && \
    cp -f libmpdec.a /usr/$ARCH-w64-mingw32/lib/ && \
    mkdir -p /usr/include/libmpdec && \
    cp -f *.h /usr/include/libmpdec/ && \
    cd ../libmpdec++ && \
    make libmpdec++.a -j4 && \
    cp -f libmpdec++.a /usr/$ARCH-w64-mingw32/lib/ && \
    mkdir -p /usr/include/libmpdec++ && \
    cp -f *.hh /usr/include/libmpdec++/ && \
    rm -rf /tmp/mpdecimal.tar.gz /tmp/mpdecimal/

# tvision
COPY tvision-io.h.diff /tmp/tvision-io.h.diff
RUN curl -L -o /tmp/tvision.zip https://github.com/magiblot/tvision/archive/290ccbaa9fc7e3c8278b632a28291d0b0154ed3b.zip && \
    cd /tmp && \
    unzip -q tvision.zip && \
    mv tvision-*/ tvision/ && \
    patch tvision/include/tvision/compat/io.h /tmp/tvision-io.h.diff && \
    mkdir -p tvision/build && \
    cd tvision/build && \
    cmake .. \
        -DCMAKE_PREFIX_PATH=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_INSTALL_PREFIX=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain-cross-mingw64-linux-$ARCH.cmake \
        && \
    make -j4 && \
    make install && \
    rm -rf /tmp/tvision.zip /tmp/tvision/

# turbo
COPY turbo-CMakeLists.txt.diff /tmp/turbo-CMakeLists.txt.diff
RUN curl -L -o /tmp/turbo.zip https://github.com/magiblot/turbo/archive/2b930c017f4324c4ca42d63eeb1d82f09190faba.zip && \
    cd /tmp && \
    unzip -q turbo.zip && \
    mv turbo-*/ turbo/ && \
    cd turbo && \
    patch CMakeLists.txt /tmp/turbo-CMakeLists.txt.diff && \
    mv scintilla/lexers/LexBasic.cxx . && \
    rm -f scintilla/lexers/* && \
    mv -f LexBasic.cxx scintilla/lexers/LexBasic.cxx && \
    cat scintilla/src/Catalogue.cxx | sed 's:LINK_LEXER(lm.*::g; s:return 1;:LINK_LEXER(lmFreeBasic); return 1;:g' > Catalogue.cxx && \
    mv -f Catalogue.cxx scintilla/src/Catalogue.cxx && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DCMAKE_PREFIX_PATH=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_INSTALL_PREFIX=/usr/$ARCH-w64-mingw32 \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_TOOLCHAIN_FILE=/tmp/toolchain-cross-mingw64-linux-$ARCH.cmake \
        && \
    make -j4 && \
    cp -f *.a /usr/$ARCH-w64-mingw32/lib/ && \
    mkdir /usr/$ARCH-w64-mingw32/include/turbo && \
    cp $(find /tmp/turbo -name '*.h') /usr/$ARCH-w64-mingw32/include/turbo/ && \
    rm -rf /tmp/turbo.zip /tmp/turbo/

# environment
USER $HOST_UID
RUN echo "export ARCH=\"$ARCH\"" >> /home/$USER/.bashrc && \
    echo "export IMAGE_NAME=\"$IMAGE_NAME\"" >> /home/$USER/.bashrc && \
    echo "export PS1=\"[$IMAGE_NAME] \w\$ \"" >> /home/$USER/.bashrc && \
    echo "export MAKEFLAGS=\"-j4\"" >> /home/$USER/.bashrc && \
    echo "export TARGET_OS=win" >> /home/$USER/.bashrc && \
    echo "make -f /code/Makefile help" >> /home/$USER/.bashrc

ENTRYPOINT "/bin/bash"
