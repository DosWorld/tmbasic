# vs[0] w
# vs[1] h
# vs[2] half-w
# vs[3] half-h
# vs[4] max-iterations
# vs[5] c-re
# vs[6] c-im
# vs[7] old-re
# vs[8] old-im
# vs[9] y
# vs[10] h-minus-1
# vs[11] x
# vs[12] w-minus-1
# vs[13] new-re
# vs[14] temp
# vs[15] new-im
# vs[16] stop
# vs[17] i
PushValues 18

# os[0] charset
# os[1] image
PushObjects 2

# w = 40
LoadConstantA 40
StoreA 0

# h = 30
LoadConstantA 30
StoreA 1

# half-w = w/2
LoadA 0
LoadConstantB 2
ADivideB
StoreA 2

# half-h = h/2
LoadA 1
LoadConstantB 2
ADivideB
StoreA 3

# max-iterations = 30
LoadConstantA 30
StoreA 4

# c-re = -0.7
LoadConstantA -7
LoadConstantB 10
ADivideB
StoreA 5

# c-im = 0.27015
LoadConstantA 27015
LoadConstantB 100000
ADivideB
StoreA 6

# old-re = 0
LoadConstantA 0
StoreA 7

# old-im = 0
LoadConstantA 0
StoreA 8

# charset = ...
LoadConstantStringX "@@WW%%&&$$##OOIIoo++==--^^,,..  "
StoreX 0

# image = ""
LoadConstantStringX ""
StoreX 1

# y = 0
LoadConstantA 0
StoreA 9

# h-minus-1 = h - 1
LoadA 1
LoadConstantB 1
ASubtractB
StoreA 10

# while y <= h-minus-1
label y_loop_start
LoadA 9
LoadB 10
ALessThanEqualsB
BranchIfNotA y_loop_end

    # x = 0
    LoadConstantA 0
    StoreA 11

    # w-minus-1 = w - 1
    LoadA 0
    LoadConstantB 1
    ASubtractB
    StoreA 12

    # while x <= w-minus-1
    label x_loop_start
    LoadA 11
    LoadB 12
    ALessThanEqualsB
    BranchIfNotA x_loop_end

        # new-re = (1.5 * (x - half-w)) / half-w
        LoadA 11 # x
        LoadB 2 # half-w
        ASubtractB
        StoreA 14 # temp
        LoadConstantA 15
        LoadConstantB 10
        ADivideB
        LoadB 14 # temp
        AMultiplyB
        LoadB 2 # half-w
        ADivideB
        StoreA 13 # new-re

        # new-im = (y - half-h) / half-h
        LoadA 9 # y
        LoadB 3 # half-h
        ASubtractB
        LoadB 3 # half-h
        ADivideB
        StoreA 15 # new-im

        # stop = false : i = 0
        LoadConstantA 0
        StoreA 16 # stop
        StoreA 17 # i

        # while not stop
        label inner_loop_start
        LoadA 16 # stop
        BranchIfA inner_loop_end

            # old-re = new-re
            LoadA 13 # new-re
            StoreA 7 # old-re

            # old-im = new-im
            LoadA 15 # new-im
            StoreA 8 # old-im

            # new-re = old-re ** 2 - old-im ** 2 + c-re
            LoadA 8 # old-im
            LoadB 8 # old-im
            AMultiplyB
            StoreA 14 # temp
            LoadA 7 # old-re
            LoadB 7 # old-re
            AMultiplyB
            LoadB 14 # temp
            ASubtractB
            LoadB 5 # c-re
            AAddB
            StoreA 13 # new-re

            # new-im = 2 * old-re * old-im + c-im
            LoadConstantA 2
            LoadB 7 # old-re
            AMultiplyB
            LoadB 8 # old-im
            AMultiplyB
            LoadB 6 # c-im
            AAddB
            StoreA 15 # new-im

            # if new-re ** 2 + new-im ** 2 > 4
            LoadA 13 # new-re
            LoadB 13 # new-re
            AMultiplyB
            StoreA 14 # temp
            LoadA 15 # new-im
            LoadA 15 # new-im
            AMultiplyB
            LoadB 14 # temp
            AAddB
            LoadConstantB 4
            AGreaterThanB
            BranchIfNotA if1_end

                # stop = true
                LoadConstantA 1
                StoreA 16 # stop

            # end if
            label if1_end

            # if i >= max-iterations
            LoadA 17 # i
            LoadB 4 # max-iterations
            AGreaterThanEqualsB
            BranchIfNotA if2_else

                # stop = true
                LoadConstantA 1
                StoreA 16 # stop

            # else
            Jump if2_end
            label if2_else

                # i = i + 1
                LoadA 17 # i
                LoadConstantB 1
                AAddB
                StoreA 17 # i

            # end if
            label if2_end

        # wend (not stop)
        Jump inner_loop_start
        label inner_loop_end

        # image += charset[i]
        LoadX 0 # charset
        LoadA 17 # i
        LoadConstantB 1
        StringMid
        SetYFromX
        LoadX 1 # image
        StringXConcatenateY
        StoreX 1 # image

        # x = x + 1
        LoadA 11
        LoadConstantB 1
        AAddB
        StoreA 11

    # wend (x)
    Jump x_loop_start
    label x_loop_end

    # image += "\n"
    LoadConstantA 10
    PushValues 1
    StoreA 0
    SystemCall Chr
    SetYFromX
    LoadX 1 # image
    StringXConcatenateY
    StoreX 1 # image

    # y = y + 1
    LoadA 9
    LoadConstantB 1
    AAddB
    StoreA 9

# wend (y)
Jump y_loop_start
label y_loop_end

# print image
LoadX 1 # image
StringPrint
Exit

--output--
WWWWWWWWWWWWWWWWWW%%%WWWWW%WWWWWW%WWWWWW
WWWWWWWWWWWWWWWWWW%%%WWW%%%WWWWWW%WWWWWW
WWWWWWWWWWWWWWWWWW%%& %%%%%WWWWWW%WWWWWW
WWWWWWWWWWWWW%WWWW%&  $%%%%WWWWW%%WWWWWW
%WWWWWWWWWWW%%WWWW%%#  &&%%WWWW%%%WWWWWW
W%WWWWWWWWWW%%%%%%&    $&%&%WW%%%%WWWWWW
WW%WWWWWWWW%%%%%%      O I $&%%%%%%WWWWW
WWW%%WWWWWW%%%%%%-     oI  $&%&&&&&%%%WW
WWWW%%%WWWW&%%%&$           ,$&#  ,%%%%W
WWWW%%%%%%%&%%&&&+oo-       +I$   O$%%%W
WWWWW%%%&$%&&$$&$#OI         =OI    &&&W
WWWWW%%%$ O$  $$$O#o          ^      + %
WWWWW%%&   I   o O ^^                   
WWWWW%&#   ,     =                     O
W%%%&%&#I                        -    &%
W%%&#  #I                       I#  #&%%
W%&    -                        I#&%&%%%
%O                     =     ,   #&%WWWW
%                   ^^ O o   I   &%%WWWW
%% +      ^          o#O$$$  $O $%%%WWWW
WW&&&    IO=         IO#$&$$&&%$&%%%WWWW
WW%%%$O   $I+       -oo+&&&%%&%%%%%%%WWW
WW%%%%,  #&$,           $&%%%&WWWW%%%WWW
WWW%%%&&&&&%&$  Io     -%%%%%%WWWWWW%%WW
WWWWWW%%%%%%&$ I O      %%%%%%WWWWWWWW%W
WWWWWWW%%%%WW%&%&$    &%%%%%%WWWWWWWWWW%
WWWWWWW%%%WWWW%%&&  #%%WWWW%%WWWWWWWWWWW
WWWWWWW%%WWWWW%%%%$  &%WWWW%WWWWWWWWWWWW
WWWWWWW%WWWWWW%%%%% &%%WWWWWWWWWWWWWWWWW
WWWWWWW%WWWWWW%%%WWW%%%WWWWWWWWWWWWWWWWW
