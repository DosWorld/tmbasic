#include "InsertColorDialog.h"
#include "../tmbasic/App.h"
#include "../shared/Button.h"
#include "../shared/DialogPtr.h"
#include "../shared/InputLine.h"
#include "../shared/Label.h"
#include "../shared/StatusLine.h"
#include "../shared/ViewPtr.h"
#include "../shared/tvutil.h"
#include "GridLayout.h"
#include "events.h"
#include "helpfile.h"

using shared::Button;
using shared::DialogPtr;
using shared::InputLine;
using shared::Label;
using shared::parseUserInt;
using shared::StatusLine;
using shared::ViewPtr;

namespace tmbasic {

// generated using InsertColorDialog-picture-truecolor.linq
static const std::vector<TColorRGB> _colorsTrue{
    0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0,
    0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
    0xff0000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x00ff00, 0x00ff00,
    0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff,
    0x00ffff, 0x00ffff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0xff00ff,
    0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080,
    0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x808000, 0x808000, 0x808000,
    0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000,
    0x008000, 0x008000, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x000080, 0x000080,
    0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080,
    0x800080, 0x800080, 0x800080, 0xffb5b2, 0xffbdb2, 0xffc4b2, 0xffccb2, 0xffd4b2, 0xffdab2, 0xffe2b2, 0xffe9b2,
    0xfff1b2, 0xfff9b2, 0xffffb2, 0xf7ffb2, 0xf0ffb2, 0xe8ffb2, 0xe0ffb2, 0xd9ffb2, 0xd2ffb2, 0xcbffb2, 0xc3ffb2,
    0xbbffb2, 0xb4ffb2, 0xb2ffb8, 0xb2ffbf, 0xb2ffc7, 0xb2ffcf, 0xb2ffd6, 0xb2ffdd, 0xb2ffe4, 0xb2ffec, 0xb2fff4,
    0xb2fffb, 0xb2fcff, 0xb2f5ff, 0xb2edff, 0xb2e5ff, 0xb2deff, 0xb2d7ff, 0xb2d0ff, 0xb2c8ff, 0xb2c1ff, 0xb2b9ff,
    0xb2b2ff, 0xbab2ff, 0xc2b2ff, 0xc9b2ff, 0xd1b2ff, 0xd9b2ff, 0xdfb2ff, 0xe7b2ff, 0xeeb2ff, 0xf6b2ff, 0xfeb2ff,
    0xffb2fa, 0xffb2f2, 0xffb2eb, 0xffb2e3, 0xffb2db, 0xffb2d5, 0xffb2cd, 0xffb2c6, 0xffb2be, 0xffb2b6, 0xff8e8a,
    0xff998a, 0xffa58a, 0xffb18a, 0xffbd8a, 0xffc68a, 0xffd28a, 0xffde8a, 0xffe98a, 0xfff58a, 0xffff8a, 0xf3ff8a,
    0xe8ff8a, 0xdcff8a, 0xd0ff8a, 0xc4ff8a, 0xbbff8a, 0xafff8a, 0xa3ff8a, 0x97ff8a, 0x8cff8a, 0x8aff92, 0x8aff9d,
    0x8affa9, 0x8affb5, 0x8affc0, 0x8affca, 0x8affd6, 0x8affe2, 0x8affed, 0x8afff9, 0x8afbff, 0x8aefff, 0x8ae4ff,
    0x8ad8ff, 0x8accff, 0x8ac2ff, 0x8ab7ff, 0x8aabff, 0x8a9fff, 0x8a93ff, 0x8a8aff, 0x958aff, 0xa18aff, 0xad8aff,
    0xb98aff, 0xc48aff, 0xce8aff, 0xda8aff, 0xe68aff, 0xf18aff, 0xfd8aff, 0xff8af7, 0xff8aeb, 0xff8ae0, 0xff8ad4,
    0xff8ac8, 0xff8abe, 0xff8ab3, 0xff8aa7, 0xff8a9b, 0xff8a90, 0xff6661, 0xff7661, 0xff8661, 0xff9661, 0xffa561,
    0xffb361, 0xffc261, 0xffd261, 0xffe261, 0xfff261, 0xffff61, 0xefff61, 0xdfff61, 0xd0ff61, 0xc0ff61, 0xb0ff61,
    0xa3ff61, 0x93ff61, 0x83ff61, 0x73ff61, 0x64ff61, 0x61ff6b, 0x61ff7b, 0x61ff8b, 0x61ff9b, 0x61ffab, 0x61ffb8,
    0x61ffc8, 0x61ffd7, 0x61ffe7, 0x61fff7, 0x61faff, 0x61eaff, 0x61daff, 0x61caff, 0x61baff, 0x61adff, 0x619eff,
    0x618eff, 0x617eff, 0x616eff, 0x6161ff, 0x7161ff, 0x8161ff, 0x9061ff, 0xa061ff, 0xb061ff, 0xbd61ff, 0xcd61ff,
    0xdd61ff, 0xed61ff, 0xfc61ff, 0xff61f4, 0xff61e5, 0xff61d5, 0xff61c5, 0xff61b5, 0xff61a8, 0xff6198, 0xff6188,
    0xff6179, 0xff6169, 0xff3f38, 0xff5338, 0xff6738, 0xff7a38, 0xff8e38, 0xff9f38, 0xffb338, 0xffc738, 0xffdb38,
    0xffee38, 0xffff38, 0xebff38, 0xd7ff38, 0xc3ff38, 0xafff38, 0x9cff38, 0x8bff38, 0x77ff38, 0x63ff38, 0x4fff38,
    0x3bff38, 0x38ff45, 0x38ff59, 0x38ff6d, 0x38ff81, 0x38ff95, 0x38ffa5, 0x38ffb9, 0x38ffcd, 0x38ffe1, 0x38fff5,
    0x38f8ff, 0x38e4ff, 0x38d1ff, 0x38bdff, 0x38a9ff, 0x3898ff, 0x3884ff, 0x3870ff, 0x385dff, 0x3849ff, 0x3838ff,
    0x4c38ff, 0x6038ff, 0x7438ff, 0x8838ff, 0x9c38ff, 0xac38ff, 0xc038ff, 0xd438ff, 0xe838ff, 0xfc38ff, 0xff38f2,
    0xff38de, 0xff38ca, 0xff38b6, 0xff38a2, 0xff3892, 0xff387e, 0xff386a, 0xff3856, 0xff3842, 0xff170f, 0xff2f0f,
    0xff470f, 0xff5f0f, 0xff770f, 0xff8b0f, 0xffa30f, 0xffbb0f, 0xffd30f, 0xffeb0f, 0xffff0f, 0xe7ff0f, 0xcfff0f,
    0xb7ff0f, 0x9fff0f, 0x87ff0f, 0x73ff0f, 0x5bff0f, 0x43ff0f, 0x2bff0f, 0x13ff0f, 0x0fff1f, 0x0fff37, 0x0fff4f,
    0x0fff67, 0x0fff7f, 0x0fff93, 0x0fffab, 0x0fffc3, 0x0fffdb, 0x0ffff3, 0x0ff7ff, 0x0fdfff, 0x0fc7ff, 0x0fafff,
    0x0f97ff, 0x0f83ff, 0x0f6bff, 0x0f53ff, 0x0f3bff, 0x0f23ff, 0x0f0fff, 0x270fff, 0x3f0fff, 0x570fff, 0x6f0fff,
    0x870fff, 0x9b0fff, 0xb30fff, 0xcb0fff, 0xe30fff, 0xfb0fff, 0xff0fef, 0xff0fd7, 0xff0fbf, 0xff0fa7, 0xff0f8f,
    0xff0f7b, 0xff0f63, 0xff0f4b, 0xff0f33, 0xff0f1b, 0xe60800, 0xe61f00, 0xe63600, 0xe64c00, 0xe66300, 0xe67700,
    0xe68e00, 0xe6a400, 0xe6bb00, 0xe6d200, 0xe5e600, 0xcfe600, 0xb8e600, 0xa1e600, 0x8ae600, 0x73e600, 0x60e600,
    0x49e600, 0x32e600, 0x1be600, 0x04e600, 0x00e60f, 0x00e626, 0x00e63d, 0x00e654, 0x00e66b, 0x00e67e, 0x00e695,
    0x00e6ac, 0x00e6c3, 0x00e6da, 0x00dee6, 0x00c7e6, 0x00b0e6, 0x0099e6, 0x0082e6, 0x006fe6, 0x0058e6, 0x0041e6,
    0x002ae6, 0x0013e6, 0x0000e6, 0x1700e6, 0x2e00e6, 0x4500e6, 0x5c00e6, 0x7300e6, 0x8600e6, 0x9d00e6, 0xb400e6,
    0xcb00e6, 0xe200e6, 0xe600d6, 0xe600bf, 0xe600a8, 0xe60091, 0xe6007a, 0xe60067, 0xe60050, 0xe60039, 0xe60022,
    0xe6000b, 0xbd0600, 0xbd1900, 0xbd2c00, 0xbd3f00, 0xbd5200, 0xbd6100, 0xbd7400, 0xbd8700, 0xbd9a00, 0xbdad00,
    0xbdbd00, 0xaabd00, 0x97bd00, 0x84bd00, 0x71bd00, 0x5ebd00, 0x4fbd00, 0x3cbd00, 0x29bd00, 0x16bd00, 0x03bd00,
    0x00bd0d, 0x00bd1f, 0x00bd32, 0x00bd45, 0x00bd58, 0x00bd68, 0x00bd7b, 0x00bd8e, 0x00bda0, 0x00bdb3, 0x00b6bd,
    0x00a4bd, 0x0091bd, 0x007ebd, 0x006bbd, 0x005bbd, 0x0048bd, 0x0035bd, 0x0023bd, 0x0010bd, 0x0000bd, 0x1300bd,
    0x2600bd, 0x3900bd, 0x4b00bd, 0x5e00bd, 0x6e00bd, 0x8100bd, 0x9400bd, 0xa700bd, 0xba00bd, 0xbd00b0, 0xbd009d,
    0xbd008a, 0xbd0078, 0xbd0065, 0xbd0055, 0xbd0042, 0xbd002f, 0xbd001c, 0xbd0009, 0x940500, 0x941400, 0x942300,
    0x943100, 0x944000, 0x944c00, 0x945b00, 0x946a00, 0x947900, 0x948800, 0x949400, 0x859400, 0x769400, 0x689400,
    0x599400, 0x4a9400, 0x3e9400, 0x2f9400, 0x209400, 0x119400, 0x029400, 0x00940a, 0x009419, 0x009427, 0x009436,
    0x009445, 0x009451, 0x009460, 0x00946f, 0x00947e, 0x00948d, 0x008f94, 0x008094, 0x007194, 0x006394, 0x005494,
    0x004794, 0x003994, 0x002a94, 0x001b94, 0x000c94, 0x000094, 0x0f0094, 0x1e0094, 0x2c0094, 0x3b0094, 0x4a0094,
    0x560094, 0x650094, 0x740094, 0x830094, 0x910094, 0x94008a, 0x94007b, 0x94006c, 0x94005e, 0x94004f, 0x940043,
    0x940034, 0x940025, 0x940016, 0x940007, 0x660300, 0x660e00, 0x661800, 0x662200, 0x662c00, 0x663500, 0x663f00,
    0x664900, 0x665300, 0x665e00, 0x666600, 0x5c6600, 0x526600, 0x476600, 0x3d6600, 0x336600, 0x2a6600, 0x206600,
    0x166600, 0x0c6600, 0x026600, 0x006607, 0x006611, 0x00661b, 0x006625, 0x006630, 0x006638, 0x006642, 0x00664d,
    0x006657, 0x006661, 0x006366, 0x005866, 0x004e66, 0x004466, 0x003a66, 0x003166, 0x002766, 0x001d66, 0x001366,
    0x000866, 0x000066, 0x0a0066, 0x140066, 0x1f0066, 0x290066, 0x330066, 0x3b0066, 0x460066, 0x500066, 0x5a0066,
    0x640066, 0x66005f, 0x660055, 0x66004b, 0x660041, 0x660036, 0x66002e, 0x660024, 0x660019, 0x66000f, 0x660005,
    0x3d0200, 0x3d0800, 0x3d0e00, 0x3d1400, 0x3d1b00, 0x3d2000, 0x3d2600, 0x3d2c00, 0x3d3200, 0x3d3800, 0x3d3d00,
    0x373d00, 0x313d00, 0x2b3d00, 0x253d00, 0x1f3d00, 0x193d00, 0x133d00, 0x0d3d00, 0x073d00, 0x013d00, 0x003d04,
    0x003d0a, 0x003d10, 0x003d16, 0x003d1d, 0x003d22, 0x003d28, 0x003d2e, 0x003d34, 0x003d3a, 0x003b3d, 0x00353d,
    0x002f3d, 0x00293d, 0x00233d, 0x001e3d, 0x00173d, 0x00113d, 0x000b3d, 0x00053d, 0x00003d, 0x06003d, 0x0c003d,
    0x12003d, 0x18003d, 0x1f003d, 0x24003d, 0x2a003d, 0x30003d, 0x36003d, 0x3c003d, 0x3d0039, 0x3d0033, 0x3d002d,
    0x3d0027, 0x3d0021, 0x3d001c, 0x3d0015, 0x3d000f, 0x3d0009, 0x3d0003, 0xe6cccb, 0xe6cfcb, 0xe6d2cb, 0xe6d4cb,
    0xe6d7cb, 0xe6d9cb, 0xe6dccb, 0xe6dfcb, 0xe6e1cb, 0xe6e4cb, 0xe6e6cb, 0xe3e6cb, 0xe1e6cb, 0xdee6cb, 0xdbe6cb,
    0xd9e6cb, 0xd7e6cb, 0xd4e6cb, 0xd1e6cb, 0xcee6cb, 0xcce6cb, 0xcbe6cd, 0xcbe6d0, 0xcbe6d3, 0xcbe6d5, 0xcbe6d8,
    0xcbe6da, 0xcbe6dd, 0xcbe6df, 0xcbe6e2, 0xcbe6e5, 0xcbe5e6, 0xcbe3e6, 0xcbe0e6, 0xcbdde6, 0xcbdbe6, 0xcbd8e6,
    0xcbd6e6, 0xcbd3e6, 0xcbd0e6, 0xcbcee6, 0xcbcbe6, 0xcecbe6, 0xd1cbe6, 0xd3cbe6, 0xd6cbe6, 0xd9cbe6, 0xdbcbe6,
    0xdecbe6, 0xe0cbe6, 0xe3cbe6, 0xe6cbe6, 0xe6cbe4, 0xe6cbe2, 0xe6cbdf, 0xe6cbdc, 0xe6cbda, 0xe6cbd7, 0xe6cbd5,
    0xe6cbd2, 0xe6cbcf, 0xe6cbcd, 0xcc9694, 0xcc9c94, 0xcca194, 0xcca794, 0xccac94, 0xccb194, 0xccb694, 0xccbc94,
    0xccc194, 0xccc794, 0xcccc94, 0xc6cc94, 0xc1cc94, 0xbbcc94, 0xb5cc94, 0xb0cc94, 0xabcc94, 0xa6cc94, 0xa0cc94,
    0x9bcc94, 0x95cc94, 0x94cc98, 0x94cc9e, 0x94cca3, 0x94cca9, 0x94ccae, 0x94ccb3, 0x94ccb8, 0x94ccbe, 0x94ccc3,
    0x94ccc9, 0x94cacc, 0x94c4cc, 0x94bfcc, 0x94b9cc, 0x94b4cc, 0x94afcc, 0x94a9cc, 0x94a4cc, 0x949ecc, 0x9499cc,
    0x9494cc, 0x9a94cc, 0x9f94cc, 0xa594cc, 0xaa94cc, 0xb094cc, 0xb594cc, 0xba94cc, 0xc094cc, 0xc594cc, 0xcb94cc,
    0xcc94c8, 0xcc94c2, 0xcc94bd, 0xcc94b7, 0xcc94b2, 0xcc94ad, 0xcc94a8, 0xcc94a2, 0xcc949d, 0xcc9497, 0xb1605d,
    0xb1685d, 0xb1715d, 0xb1795d, 0xb1825d, 0xb1895d, 0xb1915d, 0xb1995d, 0xb1a25d, 0xb1aa5d, 0xb1b15d, 0xa9b15d,
    0xa0b15d, 0x98b15d, 0x90b15d, 0x87b15d, 0x80b15d, 0x78b15d, 0x6fb15d, 0x67b15d, 0x5fb15d, 0x5db163, 0x5db16b,
    0x5db174, 0x5db17c, 0x5db184, 0x5db18b, 0x5db194, 0x5db19c, 0x5db1a5, 0x5db1ad, 0x5daeb1, 0x5da6b1, 0x5d9eb1,
    0x5d95b1, 0x5d8db1, 0x5d86b1, 0x5d7db1, 0x5d75b1, 0x5d6db1, 0x5d64b1, 0x5d5db1, 0x665db1, 0x6e5db1, 0x765db1,
    0x7f5db1, 0x875db1, 0x8e5db1, 0x975db1, 0x9f5db1, 0xa75db1, 0xb05db1, 0xb15dac, 0xb15da3, 0xb15d9b, 0xb15d92,
    0xb15d8a, 0xb15d83, 0xb15d7b, 0xb15d72, 0xb15d6a, 0xb15d61, 0x7f403d, 0x7f463d, 0x7f4d3d, 0x7f533d, 0x7f5a3d,
    0x7f5f3d, 0x7f663d, 0x7f6d3d, 0x7f733d, 0x7f7a3d, 0x7f7f3d, 0x797f3d, 0x727f3d, 0x6c7f3d, 0x657f3d, 0x5e7f3d,
    0x597f3d, 0x527f3d, 0x4c7f3d, 0x457f3d, 0x3e7f3d, 0x3d7f42, 0x3d7f48, 0x3d7f4f, 0x3d7f56, 0x3d7f5c, 0x3d7f62,
    0x3d7f68, 0x3d7f6f, 0x3d7f75, 0x3d7f7c, 0x3d7d7f, 0x3d777f, 0x3d707f, 0x3d697f, 0x3d637f, 0x3d5d7f, 0x3d577f,
    0x3d507f, 0x3d497f, 0x3d437f, 0x3d3d7f, 0x443d7f, 0x4b3d7f, 0x513d7f, 0x583d7f, 0x5e3d7f, 0x643d7f, 0x6a3d7f,
    0x713d7f, 0x783d7f, 0x7e3d7f, 0x7f3d7b, 0x7f3d74, 0x7f3d6e, 0x7f3d67, 0x7f3d61, 0x7f3d5b, 0x7f3d54, 0x7f3d4e,
    0x7f3d47, 0x7f3d41, 0x452221, 0x452621, 0x452921, 0x452d21, 0x453121, 0x453421, 0x453721, 0x453b21, 0x453e21,
    0x454221, 0x454521, 0x414521, 0x3e4521, 0x3a4521, 0x374521, 0x334521, 0x304521, 0x2c4521, 0x294521, 0x254521,
    0x224521, 0x214524, 0x214527, 0x21452b, 0x21452e, 0x214532, 0x214535, 0x214538, 0x21453c, 0x21453f, 0x214543,
    0x214445, 0x214045, 0x213d45, 0x213945, 0x213545, 0x213245, 0x212f45, 0x212b45, 0x212845, 0x212445, 0x212145,
    0x252145, 0x282145, 0x2c2145, 0x2f2145, 0x332145, 0x362145, 0x3a2145, 0x3d2145, 0x412145, 0x442145, 0x452142,
    0x45213f, 0x45213b, 0x452138, 0x452134, 0x452131, 0x45212e, 0x45212a, 0x452127, 0x452123, 0xfdfdfd, 0xf9f9f9,
    0xf5f5f5, 0xf1f1f1, 0xededed, 0xe9e9e9, 0xe5e5e5, 0xe1e1e1, 0xdddddd, 0xd8d8d8, 0xd4d4d4, 0xd0d0d0, 0xcccccc,
    0xc8c8c8, 0xc4c4c4, 0xc0c0c0, 0xbcbcbc, 0xb8b8b8, 0xb3b3b3, 0xafafaf, 0xababab, 0xa7a7a7, 0xa3a3a3, 0x9f9f9f,
    0x9b9b9b, 0x979797, 0x939393, 0x8e8e8e, 0x8a8a8a, 0x868686, 0x828282, 0x7e7e7e, 0x7a7a7a, 0x767676, 0x727272,
    0x6d6d6d, 0x696969, 0x656565, 0x616161, 0x5d5d5d, 0x595959, 0x555555, 0x515151, 0x4d4d4d, 0x484848, 0x444444,
    0x404040, 0x3c3c3c, 0x383838, 0x343434, 0x303030, 0x2c2c2c, 0x282828, 0x232323, 0x1f1f1f, 0x1b1b1b, 0x171717,
    0x131313, 0x0f0f0f, 0x0b0b0b, 0x070707, 0x030303,
};

// generated using InsertColorDialog-picture-256color.linq
static const int kColors256Width = 62;
static const int kColors256Height = 18;
static const std::vector<TColorRGB> _colors256{
    0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0,
    0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
    0xff0000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x00ff00, 0x00ff00,
    0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff,
    0x00ffff, 0x00ffff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0xff00ff,
    0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080,
    0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x808000, 0x808000, 0x808000,
    0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000,
    0x008000, 0x008000, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x000080, 0x000080,
    0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080,
    0x800080, 0x800080, 0x800080, 0xffd7d7, 0xffd7d7, 0xffd7d7, 0xffd7d7, 0xffd7d7, 0xffd7d7, 0xffd7d7, 0xffd7d7,
    0xffd7d7, 0xffd7d7, 0xffffd7, 0xffffd7, 0xffffd7, 0xffffd7, 0xffffd7, 0xffffd7, 0xffffd7, 0xffffd7, 0xffffd7,
    0xffffd7, 0xffffd7, 0xd7ffd7, 0xd7ffd7, 0xd7ffd7, 0xd7ffd7, 0xd7ffd7, 0xd7ffd7, 0xd7ffd7, 0xd7ffd7, 0xd7ffd7,
    0xd7ffd7, 0xd7ffff, 0xd7ffff, 0xd7ffff, 0xd7ffff, 0xd7ffff, 0xd7ffff, 0xd7ffff, 0xd7ffff, 0xd7ffff, 0xd7ffff,
    0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff, 0xd7d7ff,
    0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffd7ff, 0xffafaf,
    0xffafaf, 0xffafaf, 0xffafaf, 0xffafaf, 0xffd7af, 0xffd7af, 0xffd7af, 0xffd7af, 0xffd7af, 0xffffaf, 0xffffaf,
    0xffffaf, 0xffffaf, 0xffffaf, 0xd7ffaf, 0xd7ffaf, 0xd7ffaf, 0xd7ffaf, 0xd7ffaf, 0xd7ffaf, 0xafffaf, 0xafffaf,
    0xafffaf, 0xafffaf, 0xafffaf, 0xafffd7, 0xafffd7, 0xafffd7, 0xafffd7, 0xafffd7, 0xafffff, 0xafffff, 0xafffff,
    0xafffff, 0xafffff, 0xafd7ff, 0xafd7ff, 0xafd7ff, 0xafd7ff, 0xafd7ff, 0xafafff, 0xafafff, 0xafafff, 0xafafff,
    0xafafff, 0xd7afff, 0xd7afff, 0xd7afff, 0xd7afff, 0xd7afff, 0xd7afff, 0xffafff, 0xffafff, 0xffafff, 0xffafff,
    0xffafff, 0xffafd7, 0xffafd7, 0xffafd7, 0xffafd7, 0xffafd7, 0xff8787, 0xff8787, 0xff8787, 0xffaf87, 0xffaf87,
    0xffaf87, 0xffaf87, 0xffd787, 0xffd787, 0xffd787, 0xffff87, 0xffff87, 0xffff87, 0xffff87, 0xd7ff87, 0xd7ff87,
    0xd7ff87, 0xafff87, 0xafff87, 0xafff87, 0xafff87, 0x87ff87, 0x87ff87, 0x87ff87, 0x87ffaf, 0x87ffaf, 0x87ffaf,
    0x87ffd7, 0x87ffd7, 0x87ffd7, 0x87ffd7, 0x87ffff, 0x87ffff, 0x87ffff, 0x87d7ff, 0x87d7ff, 0x87d7ff, 0x87d7ff,
    0x87afff, 0x87afff, 0x87afff, 0x8787ff, 0x8787ff, 0x8787ff, 0x8787ff, 0xaf87ff, 0xaf87ff, 0xaf87ff, 0xd787ff,
    0xd787ff, 0xd787ff, 0xd787ff, 0xff87ff, 0xff87ff, 0xff87ff, 0xff87d7, 0xff87d7, 0xff87d7, 0xff87af, 0xff87af,
    0xff87af, 0xff87af, 0xff5f5f, 0xff5f5f, 0xff875f, 0xff875f, 0xff875f, 0xffaf5f, 0xffaf5f, 0xffaf5f, 0xffd75f,
    0xffd75f, 0xffff5f, 0xffff5f, 0xffff5f, 0xd7ff5f, 0xd7ff5f, 0xafff5f, 0xafff5f, 0xafff5f, 0x87ff5f, 0x87ff5f,
    0x87ff5f, 0x5fff5f, 0x5fff5f, 0x5fff87, 0x5fff87, 0x5fff87, 0x5fffaf, 0x5fffaf, 0x5fffd7, 0x5fffd7, 0x5fffd7,
    0x5fffff, 0x5fffff, 0x5fd7ff, 0x5fd7ff, 0x5fd7ff, 0x5fafff, 0x5fafff, 0x5fafff, 0x5f87ff, 0x5f87ff, 0x5f5fff,
    0x5f5fff, 0x5f5fff, 0x875fff, 0x875fff, 0xaf5fff, 0xaf5fff, 0xaf5fff, 0xd75fff, 0xd75fff, 0xd75fff, 0xff5fff,
    0xff5fff, 0xff5fd7, 0xff5fd7, 0xff5fd7, 0xff5faf, 0xff5faf, 0xff5f87, 0xff5f87, 0xff5f87, 0xff0000, 0xff0000,
    0xff5f00, 0xff5f00, 0xff8700, 0xff8700, 0xffaf00, 0xffaf00, 0xffd700, 0xffd700, 0xffff00, 0xffff00, 0xd7ff00,
    0xd7ff00, 0xafff00, 0xafff00, 0x87ff00, 0x87ff00, 0x87ff00, 0x5fff00, 0x5fff00, 0x00ff00, 0x00ff00, 0x00ff5f,
    0x00ff5f, 0x00ff87, 0x00ff87, 0x00ffaf, 0x00ffaf, 0x00ffd7, 0x00ffd7, 0x00ffff, 0x00ffff, 0x00d7ff, 0x00d7ff,
    0x00afff, 0x00afff, 0x0087ff, 0x0087ff, 0x005fff, 0x005fff, 0x0000ff, 0x0000ff, 0x5f00ff, 0x5f00ff, 0x8700ff,
    0x8700ff, 0xaf00ff, 0xaf00ff, 0xaf00ff, 0xd700ff, 0xd700ff, 0xff00ff, 0xff00ff, 0xff00d7, 0xff00d7, 0xff00af,
    0xff00af, 0xff0087, 0xff0087, 0xff005f, 0xff005f, 0xd70000, 0xd70000, 0xd75f00, 0xd75f00, 0xd75f00, 0xd78700,
    0xd78700, 0xd78700, 0xd7af00, 0xd7af00, 0xd7d700, 0xd7d700, 0xd7d700, 0xafd700, 0xafd700, 0x87d700, 0x87d700,
    0x87d700, 0x5fd700, 0x5fd700, 0x5fd700, 0x00d700, 0x00d700, 0x00d75f, 0x00d75f, 0x00d75f, 0x00d787, 0x00d787,
    0x00d7af, 0x00d7af, 0x00d7af, 0x00d7d7, 0x00d7d7, 0x00afd7, 0x00afd7, 0x00afd7, 0x0087d7, 0x0087d7, 0x0087d7,
    0x005fd7, 0x005fd7, 0x0000d7, 0x0000d7, 0x0000d7, 0x5f00d7, 0x5f00d7, 0x8700d7, 0x8700d7, 0x8700d7, 0xaf00d7,
    0xaf00d7, 0xaf00d7, 0xd700d7, 0xd700d7, 0xd700af, 0xd700af, 0xd700af, 0xd70087, 0xd70087, 0xd7005f, 0xd7005f,
    0xd7005f, 0xaf0000, 0xaf0000, 0xaf0000, 0xaf5f00, 0xaf5f00, 0xaf5f00, 0xaf5f00, 0xaf8700, 0xaf8700, 0xaf8700,
    0xafaf00, 0xafaf00, 0xafaf00, 0xafaf00, 0x87af00, 0x87af00, 0x87af00, 0x5faf00, 0x5faf00, 0x5faf00, 0x5faf00,
    0x00af00, 0x00af00, 0x00af00, 0x00af5f, 0x00af5f, 0x00af5f, 0x00af87, 0x00af87, 0x00af87, 0x00af87, 0x00afaf,
    0x00afaf, 0x00afaf, 0x0087af, 0x0087af, 0x0087af, 0x0087af, 0x005faf, 0x005faf, 0x005faf, 0x0000af, 0x0000af,
    0x0000af, 0x0000af, 0x5f00af, 0x5f00af, 0x5f00af, 0x8700af, 0x8700af, 0x8700af, 0x8700af, 0xaf00af, 0xaf00af,
    0xaf00af, 0xaf0087, 0xaf0087, 0xaf0087, 0xaf005f, 0xaf005f, 0xaf005f, 0xaf005f, 0x870000, 0x870000, 0x870000,
    0x870000, 0x870000, 0x875f00, 0x875f00, 0x875f00, 0x875f00, 0x875f00, 0x878700, 0x878700, 0x878700, 0x878700,
    0x878700, 0x5f8700, 0x5f8700, 0x5f8700, 0x5f8700, 0x5f8700, 0x5f8700, 0x008700, 0x008700, 0x008700, 0x008700,
    0x008700, 0x00875f, 0x00875f, 0x00875f, 0x00875f, 0x00875f, 0x008787, 0x008787, 0x008787, 0x008787, 0x008787,
    0x005f87, 0x005f87, 0x005f87, 0x005f87, 0x005f87, 0x000087, 0x000087, 0x000087, 0x000087, 0x000087, 0x5f0087,
    0x5f0087, 0x5f0087, 0x5f0087, 0x5f0087, 0x5f0087, 0x870087, 0x870087, 0x870087, 0x870087, 0x870087, 0x87005f,
    0x87005f, 0x87005f, 0x87005f, 0x87005f, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000,
    0x800000, 0x800000, 0x800000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000,
    0x808000, 0x808000, 0x808000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000,
    0x008000, 0x008000, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080,
    0x008080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080,
    0x000080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080,
    0x5f0000, 0x5f0000, 0x5f0000, 0x5f0000, 0x5f0000, 0x5f0000, 0x5f0000, 0x5f0000, 0x5f0000, 0x5f0000, 0x5f5f00,
    0x5f5f00, 0x5f5f00, 0x5f5f00, 0x5f5f00, 0x5f5f00, 0x5f5f00, 0x5f5f00, 0x5f5f00, 0x5f5f00, 0x5f5f00, 0x005f00,
    0x005f00, 0x005f00, 0x005f00, 0x005f00, 0x005f00, 0x005f00, 0x005f00, 0x005f00, 0x005f00, 0x005f5f, 0x005f5f,
    0x005f5f, 0x005f5f, 0x005f5f, 0x005f5f, 0x005f5f, 0x005f5f, 0x005f5f, 0x005f5f, 0x00005f, 0x00005f, 0x00005f,
    0x00005f, 0x00005f, 0x00005f, 0x00005f, 0x00005f, 0x00005f, 0x00005f, 0x00005f, 0x5f005f, 0x5f005f, 0x5f005f,
    0x5f005f, 0x5f005f, 0x5f005f, 0x5f005f, 0x5f005f, 0x5f005f, 0x5f005f, 0xd7afaf, 0xd7afaf, 0xd7afaf, 0xd7afaf,
    0xd7afaf, 0xd7afaf, 0xd7afaf, 0xd7afaf, 0xd7afaf, 0xd7afaf, 0xd7d7af, 0xd7d7af, 0xd7d7af, 0xd7d7af, 0xd7d7af,
    0xd7d7af, 0xd7d7af, 0xd7d7af, 0xd7d7af, 0xd7d7af, 0xd7d7af, 0xafd7af, 0xafd7af, 0xafd7af, 0xafd7af, 0xafd7af,
    0xafd7af, 0xafd7af, 0xafd7af, 0xafd7af, 0xafd7af, 0xafd7d7, 0xafd7d7, 0xafd7d7, 0xafd7d7, 0xafd7d7, 0xafd7d7,
    0xafd7d7, 0xafd7d7, 0xafd7d7, 0xafd7d7, 0xafafd7, 0xafafd7, 0xafafd7, 0xafafd7, 0xafafd7, 0xafafd7, 0xafafd7,
    0xafafd7, 0xafafd7, 0xafafd7, 0xafafd7, 0xd7afd7, 0xd7afd7, 0xd7afd7, 0xd7afd7, 0xd7afd7, 0xd7afd7, 0xd7afd7,
    0xd7afd7, 0xd7afd7, 0xd7afd7, 0xd78787, 0xd78787, 0xd78787, 0xd78787, 0xd78787, 0xd7af87, 0xd7af87, 0xd7af87,
    0xd7af87, 0xd7af87, 0xd7d787, 0xd7d787, 0xd7d787, 0xd7d787, 0xd7d787, 0xafd787, 0xafd787, 0xafd787, 0xafd787,
    0xafd787, 0xafd787, 0x87d787, 0x87d787, 0x87d787, 0x87d787, 0x87d787, 0x87d7af, 0x87d7af, 0x87d7af, 0x87d7af,
    0x87d7af, 0x87d7d7, 0x87d7d7, 0x87d7d7, 0x87d7d7, 0x87d7d7, 0x87afd7, 0x87afd7, 0x87afd7, 0x87afd7, 0x87afd7,
    0x8787d7, 0x8787d7, 0x8787d7, 0x8787d7, 0x8787d7, 0xaf87d7, 0xaf87d7, 0xaf87d7, 0xaf87d7, 0xaf87d7, 0xaf87d7,
    0xd787d7, 0xd787d7, 0xd787d7, 0xd787d7, 0xd787d7, 0xd787af, 0xd787af, 0xd787af, 0xd787af, 0xd787af, 0xaf8787,
    0xaf8787, 0xd75f5f, 0xd75f5f, 0xd75f5f, 0xd7875f, 0xd7875f, 0xd7875f, 0xd7af5f, 0xd7af5f, 0xafaf87, 0xafaf87,
    0xafaf87, 0xd7d75f, 0xd7d75f, 0xafd75f, 0xafd75f, 0xafd75f, 0x87d75f, 0x87d75f, 0x87d75f, 0x87af87, 0x87af87,
    0x5fd75f, 0x5fd75f, 0x5fd75f, 0x5fd787, 0x5fd787, 0x5fd7af, 0x5fd7af, 0x5fd7af, 0x87afaf, 0x87afaf, 0x5fd7d7,
    0x5fd7d7, 0x5fd7d7, 0x5fafd7, 0x5fafd7, 0x5fafd7, 0x5f87d7, 0x5f87d7, 0x8787af, 0x8787af, 0x8787af, 0x5f5fd7,
    0x5f5fd7, 0x875fd7, 0x875fd7, 0x875fd7, 0xaf5fd7, 0xaf5fd7, 0xaf5fd7, 0xaf87af, 0xaf87af, 0xd75fd7, 0xd75fd7,
    0xd75fd7, 0xd75faf, 0xd75faf, 0xd75f87, 0xd75f87, 0xd75f87, 0xaf5f5f, 0xaf5f5f, 0xaf5f5f, 0xaf5f5f, 0xaf5f5f,
    0xaf875f, 0xaf875f, 0xaf875f, 0xaf875f, 0xaf875f, 0xafaf5f, 0xafaf5f, 0xafaf5f, 0xafaf5f, 0xafaf5f, 0x87af5f,
    0x87af5f, 0x87af5f, 0x87af5f, 0x87af5f, 0x87af5f, 0x5faf5f, 0x5faf5f, 0x5faf5f, 0x5faf5f, 0x5faf5f, 0x5faf87,
    0x5faf87, 0x5faf87, 0x5faf87, 0x5faf87, 0x5fafaf, 0x5fafaf, 0x5fafaf, 0x5fafaf, 0x5fafaf, 0x5f87af, 0x5f87af,
    0x5f87af, 0x5f87af, 0x5f87af, 0x5f5faf, 0x5f5faf, 0x5f5faf, 0x5f5faf, 0x5f5faf, 0x875faf, 0x875faf, 0x875faf,
    0x875faf, 0x875faf, 0x875faf, 0xaf5faf, 0xaf5faf, 0xaf5faf, 0xaf5faf, 0xaf5faf, 0xaf5f87, 0xaf5f87, 0xaf5f87,
    0xaf5f87, 0xaf5f87, 0x875f5f, 0x875f5f, 0x875f5f, 0x875f5f, 0x875f5f, 0x875f5f, 0x875f5f, 0x875f5f, 0x875f5f,
    0x875f5f, 0x87875f, 0x87875f, 0x87875f, 0x87875f, 0x87875f, 0x87875f, 0x87875f, 0x87875f, 0x87875f, 0x87875f,
    0x87875f, 0x5f875f, 0x5f875f, 0x5f875f, 0x5f875f, 0x5f875f, 0x5f875f, 0x5f875f, 0x5f875f, 0x5f875f, 0x5f875f,
    0x5f8787, 0x5f8787, 0x5f8787, 0x5f8787, 0x5f8787, 0x5f8787, 0x5f8787, 0x5f8787, 0x5f8787, 0x5f8787, 0x5f5f87,
    0x5f5f87, 0x5f5f87, 0x5f5f87, 0x5f5f87, 0x5f5f87, 0x5f5f87, 0x5f5f87, 0x5f5f87, 0x5f5f87, 0x5f5f87, 0x875f87,
    0x875f87, 0x875f87, 0x875f87, 0x875f87, 0x875f87, 0x875f87, 0x875f87, 0x875f87, 0x875f87, 0xffffff, 0xffffff,
    0xeeeeee, 0xeeeeee, 0xe4e4e4, 0xe4e4e4, 0xdadada, 0xdadada, 0xd7d7d7, 0xd7d7d7, 0xd0d0d0, 0xd0d0d0, 0xc6c6c6,
    0xc6c6c6, 0xc0c0c0, 0xc0c0c0, 0xbcbcbc, 0xbcbcbc, 0xb2b2b2, 0xb2b2b2, 0xafafaf, 0xafafaf, 0xa8a8a8, 0xa8a8a8,
    0x9e9e9e, 0x9e9e9e, 0x949494, 0x949494, 0x8a8a8a, 0x8a8a8a, 0x878787, 0x878787, 0x808080, 0x808080, 0x767676,
    0x767676, 0x6c6c6c, 0x6c6c6c, 0x626262, 0x626262, 0x5f5f5f, 0x5f5f5f, 0x585858, 0x585858, 0x4e4e4e, 0x4e4e4e,
    0x444444, 0x444444, 0x3a3a3a, 0x3a3a3a, 0x303030, 0x303030, 0x262626, 0x262626, 0x1c1c1c, 0x1c1c1c, 0x121212,
    0x121212, 0x080808, 0x080808, 0x000000, 0x000000,
};

static const int kColors16Width = 62;
static const int kColors16Height = 4;
static const std::vector<TColorRGB> _colors16{
    0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0,
    0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
    0xff0000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x00ff00, 0x00ff00,
    0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff,
    0x00ffff, 0x00ffff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0xff00ff,
    0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
    0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0, 0xc0c0c0,
    0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffff00, 0xffff00, 0xffff00,
    0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00,
    0x00ff00, 0x00ff00, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x0000ff, 0x0000ff,
    0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff,
    0xff00ff, 0xff00ff, 0xff00ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x808080, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080, 0x808080, 0x800000, 0x800000, 0x800000, 0x800000,
    0x800000, 0x800000, 0x800000, 0x800000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000,
    0x808000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008080, 0x008080,
    0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080,
    0x000080, 0x000080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x808080, 0x808080, 0x808080, 0x808080,
    0x808080, 0x808080, 0x808080, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000, 0x800000,
    0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x808000, 0x008000, 0x008000, 0x008000,
    0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080, 0x008080,
    0x008080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x000080, 0x800080, 0x800080,
    0x800080, 0x800080, 0x800080, 0x800080, 0x800080, 0x800080,
};

static TColorRGB makeColor(uint red, uint green, uint blue) {
    return TColorRGB{ red << 16 | green << 8 | blue };
}

class ColorView : public TView {
   public:
    uint red = 255;
    uint green = 255;
    uint blue = 255;
    explicit ColorView(const TRect& bounds) : TView(bounds) {}
    void draw() override {
        TDrawBuffer b;
        auto color = makeColor(red, green, blue);
        b.moveChar(0, static_cast<char>(219), TColorAttr{ color, color }, size.x);
        for (auto y = 0; y < size.y; y++) {
            writeLine(0, static_cast<int16_t>(y), static_cast<int16_t>(size.x), 1, b);
        }
    }
};

class PaletteView : public TView {
   public:
    std::function<void(TColorRGB)> onSetColor;
    int palette = 256;  // 16 or 256

    explicit PaletteView(const TRect& bounds) : TView(bounds) {}

    void draw() override {
        auto width = getWidth();
        auto height = getHeight();
        const std::vector<TColorRGB>& colors = getColors();

        TDrawBuffer b;
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                const auto& color = colors.at(y * width + x);
                b.moveChar(x, static_cast<char>(219), TColorAttr{ color, color }, 1);
            }
            writeLine(0, static_cast<int16_t>(y), static_cast<int16_t>(width), 1, b);
        }
    }

    void handleEvent(TEvent& event) override {
        if (event.what == evMouseDown) {
            do {
                if (mouseInView(event.mouse.where)) {
                    auto width = getWidth();
                    auto height = getHeight();
                    const std::vector<TColorRGB>& colors = getColors();
                    TPoint const spot = makeLocal(event.mouse.where);
                    auto x = spot.x;
                    auto y = spot.y;
                    if (x >= 0 && x < width && y >= 0 && y < height) {
                        onSetColor(colors.at(static_cast<size_t>(y * width + x)));
                        if ((event.mouse.eventFlags & meDoubleClick) != 0) {
                            TEvent okEvent = { 0 };
                            okEvent.what = evCommand;
                            okEvent.message.command = cmOK;
                            putEvent(okEvent);
                            clearEvent(event);
                            return;
                        }
                    }
                }
            } while (mouseEvent(event, evMouseMove));
            clearEvent(event);
        }
    }

   private:
    int getWidth() const { return palette == 256 ? kColors256Width : kColors16Width; }
    int getHeight() const { return palette == 256 ? kColors256Height : kColors16Height; }
    const std::vector<TColorRGB>& getColors() const {
        if (TScreen::screenMode & TDisplay::smColorHigh) {
            return _colorsTrue;
        }
        if (palette == 256) {
            return _colors256;
        }
        return _colors16;
    }
};

class InsertColorDialogPrivate {
   public:
    ViewPtr<PaletteView> paletteView{ TRect{ 2, 2, 2 + 62, 2 + 18 } };
    ViewPtr<ColorView> colorView{ TRect{ 0, 0, 6, 2 } };
    ViewPtr<InputLine> redInputLine{ 255, 6, 3 };
    ViewPtr<InputLine> greenInputLine{ 255, 6, 3 };
    ViewPtr<InputLine> blueInputLine{ 255, 6, 3 };
    ViewPtr<Button> insertButton{ "Insert", cmOK, bfDefault };
};

InsertColorDialog::InsertColorDialog(const std::string& title, const std::string& insertButtonText)
    : TDialog({ 0, 0, 80, 22 }, title), TWindowInit(&TDialog::initFrame), _private(new InsertColorDialogPrivate()) {
    options |= ofCentered;
    helpCtx = hcide_insertColorDialog;

    _private->insertButton->setTitle(insertButtonText);

    _private->paletteView->onSetColor = [this](TColorRGB rgb) -> void {
        auto red = std::to_string(rgb.r);
        auto green = std::to_string(rgb.g);
        auto blue = std::to_string(rgb.b);
        _private->colorView->red = rgb.r;
        _private->colorView->green = rgb.g;
        _private->colorView->blue = rgb.b;
        _private->redInputLine->setText(red);
        _private->greenInputLine->setText(green);
        _private->blueInputLine->setText(blue);
        _private->insertButton->focus();
        _private->redInputLine->drawView();
        _private->greenInputLine->drawView();
        _private->blueInputLine->drawView();
        _private->colorView->drawView();
        selection = rgb;
    };

    auto palette = 16;  // 16 or 256
    if ((TScreen::screenMode & 0xFF) == TDisplay::smCO80) {
        if (TScreen::screenMode & TDisplay::smColorHigh || TScreen::screenMode & TDisplay::smColor256) {
            palette = 256;
        }
    }

    if (palette < 256) {
        StatusLine::setItemText(App::insertColorDialogHelpStatusItem, "Press ~F1~ to learn how to see more colors.");
    }

    _private->paletteView->palette = palette;
    _private->paletteView.addTo(this);
    _private->colorView->options |= ofFramed;

    ViewPtr<Label> redLabel{ "~R~:", _private->redInputLine };
    ViewPtr<Label> greenLabel{ "~G~:", _private->greenInputLine };
    ViewPtr<Label> blueLabel{ "~B~:", _private->blueInputLine };
    ViewPtr<Button> cancelButton{ "Cancel", cmCancel, bfNormal };

    if (palette == 256) {
        GridLayout(
            2,
            {
                redLabel.take(),
                _private->redInputLine.take(),
                greenLabel.take(),
                _private->greenInputLine.take(),
                blueLabel.take(),
                _private->blueInputLine.take(),
                nullptr,
                _private->colorView.take(),
            })
            .apply(this, TPoint{ 63, 5 });

        GridLayout(
            1,
            {
                _private->insertButton.take(),
                cancelButton.take(),
            })
            .setRowSpacing(0)
            .apply(this, TPoint{ 63, 0 });
    } else {
        TRect windowRect{ 0, 0, 70, 11 };
        locate(windowRect);

        GridLayout(
            3,
            {
                redLabel.take(),
                greenLabel.take(),
                blueLabel.take(),
                _private->redInputLine.take(),
                _private->greenInputLine.take(),
                _private->blueInputLine.take(),
            })
            .setRowSpacing(0)
            .apply(this, TPoint{ 11, 5 });

        _private->colorView->moveTo(4, static_cast<int16_t>(7));
        _private->colorView.addTo(this);

        RowLayout(
            true,
            {
                _private->insertButton.take(),
                cancelButton.take(),
            })
            .addTo(this, 1, size.x - 3, 8);

        TRect r{ 4, 2, 4 + 62, 2 + 4 };
        _private->paletteView->locate(r);
        _private->paletteView->options |= ofFramed;
    }

    _private->redInputLine->focus();
}

InsertColorDialog::~InsertColorDialog() {
    delete _private;
}

void InsertColorDialog::handleEvent(TEvent& event) {
    if (event.what == evCommand && event.message.command == cmOK) {
        try {
            auto red = parseUserInt(_private->redInputLine->data, "red component", 0, 255);
            auto green = parseUserInt(_private->greenInputLine->data, "green component", 0, 255);
            auto blue = parseUserInt(_private->blueInputLine->data, "blue component", 0, 255);
            selection = makeColor(red, green, blue);
        } catch (std::runtime_error& ex) {
            messageBox(ex.what(), mfError | mfOKButton);
            clearEvent(event);
        }
    } else if (event.what == evCommand && event.message.command == cmHelp) {
        didClickHelp = true;
        message(this, static_cast<uint16_t>(evCommand), cmCancel, nullptr);
        clearEvent(event);
    } else if (event.what == evBroadcast && event.message.command == kCmdTimerTick) {
        try {
            auto red = static_cast<uint>(parseUserInt(_private->redInputLine->data, "", 0, 255));
            auto green = static_cast<uint>(parseUserInt(_private->greenInputLine->data, "", 0, 255));
            auto blue = static_cast<uint>(parseUserInt(_private->blueInputLine->data, "", 0, 255));
            selection = makeColor(red, green, blue);
            if (_private->colorView->red != red || _private->colorView->green != green ||
                _private->colorView->blue != blue) {
                _private->colorView->red = red;
                _private->colorView->green = green;
                _private->colorView->blue = blue;
                _private->colorView->drawView();
            }
        } catch (std::runtime_error& e) {
            // ignore
        }
    }

    TDialog::handleEvent(event);
}

bool InsertColorDialog::go(const std::string& title, const std::string& insertButtonText, TColorRGB* output) {
    auto dialog = DialogPtr<InsertColorDialog>(title, insertButtonText);
    auto result = TProgram::deskTop->execView(dialog);
    if (result == cmOK) {
        *output = dialog->selection;
        return true;
    }
    if (result == cmCancel && dialog->didClickHelp) {
        dynamic_cast<App*>(TProgram::application)->openHelpTopic(hcide_insertColorDialog);
    }
    return false;
}

}  // namespace tmbasic
