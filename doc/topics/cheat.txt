nav@{TMBASIC Documentation:doc}@

h1[Cheat Sheet for Experienced Programmers]

TMBASIC is a statically- and nominally-typed BASIC language.
No line numbers, no `GOTO` / `GOSUB`, no `PEEK` / `POKE`, no type suffixes like `$` / `%`.
Collections and strings are dynamic-sized.
Errors are handled using exceptions (`throw` and `try` / `catch` / `finally`).
Uniform function call syntax is supported; that is, `foo(bar, baz)` is the same as `bar.foo(baz)`.

TMBASIC has a visual designer for text user interface (TUI) forms and controls, enabling rapid application development.
Forms and controls may also be constructed dynamically in BASIC code as needed.
Simpler apps may eschew a full TUI and use simple `print` / `input` calls if desired.

h2[Data types]

ul@
li@`Boolean` -- `true` / `false`.@
li@`Number` -- 128-bit decimal.@
li@`String` -- UTF-16 text.@
li@`Date` -- Date without a time.@
li@`DateTime` -- Date and time, without a time zone.@
li@`TimeZone` -- Offset from UTC and daylight saving time schedule.@
li@`ZonedDateTime` -- Record containing a `DateTime` and a `TimeZone`.@
li@`TimeSpan` -- Period of time.@
li@`List of T` -- Generic dynamic-sized array with element type `T`. Example: `List of Number`. Literals look like: `[0, 1, 2]`.@
li@`Map from K to V` -- Generic dynamic-sized dictionary with key type `K` and value type `V`. Example: `Map from Number to String`.@
li@`Optional T` -- Wrapper for type `T` indicating that the value may or may not be present. Example: `Optional Number`.@
li@`Record (...)` -- Anonymous record type, containing zero or more named fields. Example: `Record (foo as Number, bar as String)`. Literals look like `{{foo: 1, bar: "hi"}`.@
li@Named record types. These are defined using `type` ... `end type` blocks.@
@

Unlike most BASICs, there are no reference semantics in TMBASIC.
Everything is a value.
Assigning to a variable always makes a copy, even for records, lists, and maps.
Procedure parameters are passed by value.
Internally, TMBASIC uses immutable data structures to make this efficient.

h2[Sample code]

The following sample code implements the Fibonacci series.

code@
function Fibonacci(count as Number) as List of Number
    ' No explicit type needed when providing an initial value.
    dim a = 0
    dim b = 1

    ' You can declare lists this way and append items with +.
    dim seriesVerbose as List of Number
    seriesVerbose = seriesVerbose + a + b

    ' There is a literal syntax for lists, like JavaScript.
    dim seriesLessVerbose = [a, b]

    ' But building a list dynamically is easier with "dim list".
    dim list series
        ' Use "select" to append when inside "dim list".
        select a
        select b
        for i = 3 to count
            dim c = a + b
            select c
            a = b
            b = c
        next
    end dim

    return series
end function

sub Main()
    dim count = 50
    for each n in Fibonacci(count)
        Print n
    next
    ' "count.Fibonacci" is the same as "Fibonacci(count)"
    for each n in count.Fibonacci
        ' "n.Print" is the same as "Print n"
        n.Print
    next
end sub
@
