name: TMBASIC
on: [push, workflow_dispatch]

jobs:
  build-tmbasic-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux-arm64
          - platform: linux-arm32
          - platform: linux-x64
          - platform: linux-x86
          - platform: win-x64
          - platform: win-x86
    name: Build (${{ matrix.platform }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        env:
          NO_BUILD: 1
          TTY_FLAG: " "          
        run: |
          set -euxo pipefail

          export IMAGE_TAG=$(awk -F= '{ if ($1 == "build-environment-${{ matrix.platform }}") print $2 }' build/tags.ini)
          export IMAGE_NAME="ghcr.io/tmbasic-lang/tmbasic-build-env:$IMAGE_TAG"
          docker pull "$IMAGE_NAME"

          pushd build
          ./${{ matrix.platform }}.sh -c "./make-release.sh"
          popd

          pushd bin
          zip intermediate-${{ matrix.platform }}.zip tmbasic* runtime*.dat
          popd

      - name: Upload intermediate zip
        uses: actions/upload-artifact@v4
        with:
          name: intermediate-${{ matrix.platform }}
          path: bin/intermediate-${{ matrix.platform }}.zip

  build-tmbasic-mac:
    # Our build process requires an M1 Mac; it won't work on an Intel Mac.
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - platform: mac-arm64
          - platform: mac-x64
    name: Build (${{ matrix.platform }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          AWS_DEFAULT_OUTPUT: json
          NO_BUILD: 1
        run: |
          set -euxo pipefail

          # https://github.com/actions/runner-images/issues/8613
          brew install awscli

          brew install fileicon          

          export FILENAME=$(awk -F= '{ if ($1 == "build-environment-${{ matrix.platform }}") print $2 }' build/tags.ini)
          export S3_URL="s3://tmbasic/mac-build-envs/$FILENAME"
          aws s3 cp "$S3_URL" build-environment.tar.gz
          tar zxf build-environment.tar.gz

          pushd build
          ./${{ matrix.platform }}.sh -c "./make-release.sh"
          popd

          ditto -c -k --sequesterRsrc bin intermediate-${{ matrix.platform }}.zip

      - name: Upload tmbasic.zip
        uses: actions/upload-artifact@v4
        with:
          name: intermediate-${{ matrix.platform }}
          path: intermediate-${{ matrix.platform }}.zip

  make-distribution:
    # Only macOS can properly make a macOS zip with "ditto" that preserves the resource fork.
    # Might as well use macOS to make all of the distributions since it can do Linux and Windows too.
    runs-on: macos-latest
    name: Make Distribution
    permissions:
      actions: write
    needs: [build-tmbasic-docker, build-tmbasic-mac]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        run: |
          mkdir -p downloads
          mkdir -p extracted
          mkdir -p dist
          export VERSION=$(awk -F= '{ if ($1 == "version") print $2 }' build/version.ini)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloads

      - name: Extract artifacts and prepare distributions
        run: |
          set -euxo pipefail
          
          # Extract all intermediate artifacts
          for platform_dir in downloads/intermediate-*; do
            platform=$(basename "$platform_dir" | sed 's/intermediate-//')
            mkdir -p "extracted/$platform"
            unzip -o "$platform_dir"/*.zip -d "extracted/$platform"
          done
          
          # Collect all runtime dat files in one place
          mkdir -p runtime_files
          find extracted -name "runtime*.dat" -exec cp {} runtime_files/ \;
          
          # Create platform-specific distributions
          for platform in linux-arm64 linux-arm32 linux-x64 linux-x86 win-x64 win-x86 mac-arm64 mac-x64; do
            echo "Creating distribution for $platform"
            mkdir -p "dist/$platform"
            
            # Copy platform-specific executable
            if [[ "$platform" == win-* ]]; then
              cp "extracted/$platform/tmbasic.exe" "dist/$platform/"
            else
              cp "extracted/$platform/tmbasic" "dist/$platform/"
            fi
            
            # Copy all runtime dat files
            cp runtime_files/* "dist/$platform/"
            
            # Create archive with appropriate format
            if [[ "$platform" == linux-* ]]; then
              tar -czf "dist/tmbasic-$VERSION-$platform.tar.gz" -C "dist/$platform" .
            else
              # Use ditto for Mac to preserve resource forks
              if [[ "$platform" == mac-* ]]; then
                ditto -c -k --sequesterRsrc "dist/$platform" "dist/tmbasic-$VERSION-$platform.zip"
              else
                # Regular zip for Windows
                (cd "dist/$platform" && zip -r "../../dist/tmbasic-$VERSION-$platform.zip" .)
              fi
            fi
          done

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tmbasic-${{ env.VERSION }}-distributions
          path: dist/tmbasic-*
          
      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            intermediate-linux-arm64
            intermediate-linux-arm32
            intermediate-linux-x64
            intermediate-linux-x86
            intermediate-win-x64
            intermediate-win-x86
            intermediate-mac-arm64
            intermediate-mac-x64
