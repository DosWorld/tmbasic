name: TMBASIC
on: [push, workflow_dispatch]

jobs:
  build_environment_preflight:
    name: Build environment (preflight)
    runs-on: ubuntu-latest
    outputs:
      # Map the job's "build_environment_exists" output to the step's "build_environment_exists"
      build_environment_exists: ${{ steps.preflight.outputs.build_environment_exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight
        id: preflight
        run: |
          set -euo pipefail
          BUILD_ENV_VERSION=$(awk -F= '{ if ($1 == "build-environment") print $2 }' build/build-environment.ini)
          echo "BUILD_ENV_VERSION: $BUILD_ENV_VERSION"

          # win-x86 is the last one to be uploaded; so if it's present, then so are the rest.
          URL="https://tmbasic-archive.com/win-build-envs/tmbasic-build-env-win-x86-$BUILD_ENV_VERSION.zip"
          echo "URL: $URL"

          # Check if the file exists without downloading it.
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          echo "HTTP_CODE: $HTTP_CODE"

          # Set an output "build_environment_exists" with the value "true" if the file exists, or "false" if it doesn't.
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Build environment EXISTS. We will use the existing environment."
            echo "build_environment_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Build environment DOES NOT EXIST. We will build it."
            echo "build_environment_exists=false" >> $GITHUB_OUTPUT
          fi

  build_environment_linux:
    name: Build environment (${{ matrix.platform }})
    runs-on: ubuntu-latest
    needs: build_environment_preflight
    if: needs.build_environment_preflight.outputs.build_environment_exists == 'false'
    strategy:
      matrix:
        include:
          - platform: linux-arm64
            arch: arm64v8
            os: linux
            buildx-arch: linux/arm64
          - platform: linux-arm32
            arch: arm32v7
            os: linux
            buildx-arch: linux/arm/v7
          - platform: linux-x64
            arch: x86_64
            os: linux
            buildx-arch: linux/amd64
          - platform: linux-x86
            arch: i686
            os: linux
            buildx-arch: linux/386
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        env:
          USE_R2_MIRROR: 1
          PLATFORM: ${{ matrix.platform }}
          BUILDX_ARCH: ${{ matrix.buildx-arch }}
          ARCH: ${{ matrix.arch }}
          SYSROOT_IMAGE_NAME: tmbasic-linux-sysroot
        run: |
          set -euxo pipefail
          find . -type f -name "*.sh" -exec chmod +x {} \;

          # Generate the build/files/sysroot-$ARCH.tar.gz file.
          pushd build/sysroots
          IMAGE_NAME=$SYSROOT_IMAGE_NAME ./build.sh
          popd

          # Build the build environment image.
          export IMAGE_NAME="tmbasic-build-env"
          pushd build
          BUILD_ONLY=1 ./${{ matrix.platform }}.sh
          popd

          # For linux-x64 (arbitrary) let's extract the tzdb.dat file to the root directory.
          # This will be used for the Windows builds because tzdb can't be built on Windows.
          # Linux/Mac will use the tzdb.tar that's available in their build environment image.
          if [[ "${{ matrix.platform }}" == "linux-x64" ]]; then
            pushd build
            NO_BUILD=1 ./${{ matrix.platform }}.sh -c "cp /usr/share/tzdb.tar /code/tzdb.tar"
            popd
          fi

          # Save the build environment image (not just the root filesystem) to a tarball.
          docker save "$IMAGE_NAME" | gzip -c > "tmbasic-build-env-${{ matrix.platform }}.tar.gz"

      - name: Upload environment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: tmbasic-build-env-${{ matrix.platform }}.tar.gz

      - name: Upload tzdb.tar
        if: matrix.platform == 'linux-x64'
        uses: actions/upload-artifact@v4
        with:
          name: tzdb
          path: tzdb.tar

  build_environment_win:
    name: Build environment (${{ matrix.platform }})
    runs-on: windows-latest
    needs: build_environment_preflight
    if: needs.build_environment_preflight.outputs.build_environment_exists == 'false'
    strategy:
      matrix:
        include:
          - platform: win-arm64
          - platform: win-x64
          - platform: win-x86
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: |
          $ErrorActionPreference = "Stop"

          Write-Host "Building environment."
          build\${{ matrix.platform }}.ps1 -BuildDeps -BuildType Release -UseR2Mirror

          Write-Host "Archiving environment."
          $filename = "tmbasic-build-env-${{ matrix.platform }}.zip"
          Compress-Archive -Path "${{ matrix.platform }}", "win-native" -DestinationPath "$filename"

      - name: Upload environment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: tmbasic-build-env-${{ matrix.platform }}.zip

  build_environment_mac:
    name: Build environment (${{ matrix.platform }})
    # Our build process requires an M1 Mac; it won't work on an Intel Mac.
    runs-on: macos-latest
    needs: build_environment_preflight
    if: needs.build_environment_preflight.outputs.build_environment_exists == 'false'
    strategy:
      matrix:
        include:
          - platform: mac-arm64
            short_arch: arm64
          - platform: mac-x64
            short_arch: x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        env:
          USE_R2_MIRROR: 1
        run: |
          set -euxo pipefail
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Installing GNU sed."
          brew install gnu-sed
          export PATH="$(brew --prefix)/opt/gnu-sed/libexec/gnubin:$PATH"

          echo "Building environment."
          pushd build
          ./${{ matrix.platform }}.sh
          popd

          echo "Archiving environment."
          export FILENAME=tmbasic-build-env-${{ matrix.platform }}.tar.gz
          tar zcf "$FILENAME" "mac-${{ matrix.short_arch }}"

      - name: Upload environment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: tmbasic-build-env-${{ matrix.platform }}.tar.gz

  upload_build_environments:
    name: Upload build environments
    runs-on: ubuntu-latest
    needs: [build_environment_preflight, build_environment_linux, build_environment_win, build_environment_mac]
    if: needs.build_environment_preflight.outputs.build_environment_exists == 'false'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Upload all artifacts to R2
        run: |
          set -euxo pipefail

          # Collect all .tar, .tar.gz and .zip files and move them to the root
          find . -type f -name "*.tar" -exec mv {} . \;
          find . -type f -name "*.tar.gz" -exec mv {} . \;
          find . -type f -name "*.zip" -exec mv {} . \;
          ls -lR

          # Verify artifacts exist
          if [ ! -f "tzdb.tar" ]; then
            echo "Error: tzdb.tar does not exist"
            exit 1
          fi

          for platform in linux-arm64 linux-arm32 linux-x64 linux-x86 mac-arm64 mac-x64; do
            if [ ! -f "tmbasic-build-env-${platform}.tar.gz" ]; then
              echo "Error: tmbasic-build-env-${platform}.tar.gz does not exist"
              exit 1
            fi
          done

          for platform in win-arm64 win-x64 win-x86; do
            if [ ! -f "tmbasic-build-env-${platform}.zip" ]; then
              echo "Error: tmbasic-build-env-${platform}.zip does not exist"
              exit 1
            fi
          done

          # Upload artifacts to R2
          BUILD_ENV_VERSION=$(awk -F= '{ if ($1 == "build-environment") print $2 }' build/build-environment.ini)

          aws s3 cp \
            --endpoint "$R2_ENDPOINT" \
            --checksum-algorithm CRC32 \
            "tzdb.tar" \
            "s3://tmbasic-archive/tzdb/tzdb-${BUILD_ENV_VERSION}.tar"

          for platform in linux-arm64 linux-arm32 linux-x64 linux-x86; do
            aws s3 cp \
              --endpoint "$R2_ENDPOINT" \
              --checksum-algorithm CRC32 \
              "tmbasic-build-env-${platform}.tar.gz" \
              "s3://tmbasic-archive/linux-build-envs/tmbasic-build-env-${platform}-${BUILD_ENV_VERSION}.tar.gz"
          done

          for platform in mac-arm64 mac-x64; do
            aws s3 cp \
              --endpoint "$R2_ENDPOINT" \
              --checksum-algorithm CRC32 \
              "tmbasic-build-env-${platform}.tar.gz" \
              "s3://tmbasic-archive/mac-build-envs/tmbasic-build-env-${platform}-${BUILD_ENV_VERSION}.tar.gz"
          done

          for platform in win-arm64 win-x64 win-x86; do
            aws s3 cp \
              --endpoint "$R2_ENDPOINT" \
              --checksum-algorithm CRC32 \
              "tmbasic-build-env-${platform}.zip" \
              "s3://tmbasic-archive/win-build-envs/tmbasic-build-env-${platform}-${BUILD_ENV_VERSION}.zip"
          done

      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            linux-arm64
            linux-arm32
            linux-x64
            linux-x86
            win-arm64
            win-x64
            win-x86
            mac-arm64
            mac-x64
            tzdb

  build_tmbasic_linux:
    name: Build (${{ matrix.platform }})
    runs-on: ubuntu-latest
    needs: [upload_build_environments]
    if: always()
    strategy:
      matrix:
        include:
          - platform: linux-arm64
          - platform: linux-arm32
          - platform: linux-x64
          - platform: linux-x86
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build
        env:
          NO_BUILD: 1
          TTY_FLAG: " "
        run: |
          set -euxo pipefail
          find . -type f -name "*.sh" -exec chmod +x {} \;

          # Download the build image
          export BUILD_ENV_VERSION=$(awk -F= '{ if ($1 == "build-environment") print $2 }' build/build-environment.ini)
          curl -Lo build-environment.tar.gz "https://tmbasic-archive.com/linux-build-envs/tmbasic-build-env-${{ matrix.platform }}-$BUILD_ENV_VERSION.tar.gz"

          # Import the "tmbasic-build-env" image into docker
          gunzip -c build-environment.tar.gz | docker image load
          rm build-environment.tar.gz

          # Build TMBASIC
          pushd build
          IMAGE_NAME=tmbasic-build-env NO_BUILD=1 ./${{ matrix.platform }}.sh -c "scripts/make-tmbasic.sh" -DCMAKE_BUILD_TYPE=Release
          popd

          # Run tests with QEMU emulation
          cmake/bin/test --gtest_shuffle

          pushd cmake/bin
          zip intermediate-${{ matrix.platform }}.zip tmbasic* runtime*.dat
          popd

          if [[ "${{ matrix.platform }}" == linux-x64 ]]; then
            pushd build
            IMAGE_NAME=tmbasic-build-env NO_BUILD=1 ./${{ matrix.platform }}.sh -c scripts/make-license.sh
            IMAGE_NAME=tmbasic-build-env NO_BUILD=1 ./${{ matrix.platform }}.sh -c scripts/make-help.sh
            popd
          fi

      - name: Upload intermediate zip
        uses: actions/upload-artifact@v4
        with:
          name: intermediate-${{ matrix.platform }}
          path: cmake/bin/intermediate-${{ matrix.platform }}.zip

      # tzdb.tar, license.dat, help.dat are the same for every platform, so we grab them arbitrarily from linux-x64.
      - name: Upload data files
        if: matrix.platform == 'linux-x64'
        uses: actions/upload-artifact@v4
        with:
          name: data-files
          path: |
            cmake/bin/tzdb.dat
            cmake/bin/license.dat
            cmake/bin/help.dat

  build_tmbasic_win:
    name: Build (${{ matrix.platform }})
    runs-on: windows-latest
    needs: [upload_build_environments]
    if: always()
    strategy:
      matrix:
        include:
          - platform: win-arm64
          - platform: win-x64
          - platform: win-x86
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Build Environment
        shell: bash
        run: |
          set -euxo pipefail
          export BUILD_ENV_VERSION=$(awk -F= '{ if ($1 == "build-environment") print $2 }' build/build-environment.ini)
          curl -Lo build-environment.zip "https://tmbasic-archive.com/win-build-envs/tmbasic-build-env-${{ matrix.platform }}-$BUILD_ENV_VERSION.zip"
          unzip build-environment.zip

          # Windows can't build tzdb on its own, so we will grab a prebuilt tar generated by the linux-x64 build env.
          # We only need it to run the tests. We'll move it into place later when we run the tests.
          curl -Lo tzdb.tar "https://tmbasic-archive.com/tzdb/tzdb-${BUILD_ENV_VERSION}.tar"

      - name: Build
        run: |
          Write-Host "Building environment."
          build\${{ matrix.platform }}.ps1 -BuildApp -BuildType Release -UseR2Mirror

          New-Item -ItemType Directory -Path intermediate
          Move-Item -Path cmake/bin/Release/tmbasic.exe, cmake/bin/Release/runtime*.dat -Destination intermediate
          Compress-Archive -Path "intermediate\*" -DestinationPath "intermediate-${{ matrix.platform }}.zip"

          # Copy tzdb into the executable directory; required for the tests.
          Copy-Item -Path tzdb.tar -Destination "cmake/bin/Release/tzdb.dat"

          # Run x64 and x86 tests, but not arm64 because we have no way to run it.
          $platform = "${{ matrix.platform }}"
          if ($platform -eq "win-x64" -or $platform -eq "win-x86") {
              & "./cmake/bin/Release/test.exe" --gtest_shuffle
              if ($LASTEXITCODE -ne 0) {
                throw "Tests failed"
              }
          }

      - name: Upload tmbasic.zip
        uses: actions/upload-artifact@v4
        with:
          name: intermediate-${{ matrix.platform }}
          path: intermediate-${{ matrix.platform }}.zip

  build_tmbasic_mac:
    name: Build (${{ matrix.platform }})
    runs-on: macos-latest
    needs: [upload_build_environments]
    if: always()
    strategy:
      matrix:
        include:
          - platform: mac-arm64
          - platform: mac-x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        env:
          NO_BUILD: 1
        run: |
          set -euxo pipefail
          find . -type f -name "*.sh" -exec chmod +x {} \;
          brew install fileicon          

          export BUILD_ENV_VERSION=$(awk -F= '{ if ($1 == "build-environment") print $2 }' build/build-environment.ini)
          curl -Lo build-environment.tar.gz "https://tmbasic-archive.com/mac-build-envs/tmbasic-build-env-${{ matrix.platform }}-$BUILD_ENV_VERSION.tar.gz"
          tar zxf build-environment.tar.gz

          pushd build
          ./${{ matrix.platform }}.sh -c "scripts/make-tmbasic.sh" -DCMAKE_BUILD_TYPE=Release
          popd

          mkdir intermediate
          mv cmake/bin/tmbasic cmake/bin/runtime* intermediate/
          ditto -c -k --sequesterRsrc intermediate intermediate-${{ matrix.platform }}.zip

          # Run tests
          cmake/bin/test --gtest_shuffle

      - name: Upload tmbasic.zip
        uses: actions/upload-artifact@v4
        with:
          name: intermediate-${{ matrix.platform }}
          path: intermediate-${{ matrix.platform }}.zip

  make_distribution:
    # Only macOS can properly make a macOS zip with "ditto" that preserves the resource fork.
    # Might as well use macOS to make all of the distributions since it can do Linux and Windows too.
    runs-on: macos-latest
    name: Make distribution
    permissions:
      actions: write
    needs: [build_tmbasic_linux, build_tmbasic_win, build_tmbasic_mac]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        run: |
          mkdir -p downloads
          mkdir -p extracted
          mkdir -p dist

          export VERSION=$(awk -F= '{ if ($1 == "version") print $2 }' build/version.ini)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloads

      - name: Extract artifacts and prepare distributions
        run: |
          set -euxo pipefail
          
          # Extract all intermediate artifacts
          for platform_dir in downloads/intermediate-*; do
            platform=$(basename "$platform_dir" | sed 's/intermediate-//')
            mkdir -p "extracted/$platform"
            ditto -x -k "$platform_dir"/*.zip "extracted/$platform"
          done

          # Collect all runtime dat files in one place
          mkdir -p runtime_files
          find extracted -name "runtime*.dat" -exec cp {} runtime_files/ \;
          cp -f downloads/data-files/* runtime_files/

          # Diagnostics: log all the files we've got
          ls -lR runtime_files

          # Explicitly verify the existence of the expected files:
          for file in help.dat license.dat tzdb.dat runtime_linux_arm32.dat runtime_linux_arm64.dat runtime_linux_x64.dat runtime_linux_x86.dat runtime_win_arm64.dat runtime_win_x64.dat runtime_win_x86.dat runtime_mac_arm64.dat runtime_mac_x64.dat; do
            if [[ ! -f runtime_files/$file ]]; then
              echo "File $file not found"
              exit 1
            fi
          done

          # Create platform-specific distributions
          for platform in linux-arm64 linux-arm32 linux-x64 linux-x86 win-arm64 win-x64 win-x86 mac-arm64 mac-x64; do
            echo "Creating distribution for $platform"
            mkdir -p "dist/$platform"
            
            # Copy platform-specific executable
            if [[ "$platform" == win-* ]]; then
              cp "extracted/$platform/tmbasic.exe" "dist/$platform/"
            else
              cp "extracted/$platform/tmbasic" "dist/$platform/"
            fi
            
            # Copy dat files
            cp runtime_files/* "dist/$platform/"
            
            # Create archive with appropriate format
            if [[ "$platform" == linux-* ]]; then
              tar -czf "dist/tmbasic-$VERSION-$platform.tar.gz" -C "dist/$platform" .
            else
              # Use ditto for Mac to preserve resource forks
              if [[ "$platform" == mac-* ]]; then
                ditto -c -k --sequesterRsrc "dist/$platform" "dist/tmbasic-$VERSION-$platform.zip"
              else
                # Regular zip for Windows
                (cd "dist/$platform" && zip -r "../../dist/tmbasic-$VERSION-$platform.zip" .)
              fi
            fi
          done

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tmbasic-${{ env.VERSION }}-distributions
          path: dist/tmbasic-*
          
      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            intermediate-linux-arm64
            intermediate-linux-arm32
            intermediate-linux-x64
            intermediate-linux-x86
            intermediate-win-arm64
            intermediate-win-x64
            intermediate-win-x86
            intermediate-mac-arm64
            intermediate-mac-x64
            data-files
