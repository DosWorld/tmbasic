name: Build Environments
on: workflow_dispatch

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux-arm64
            arch: arm64v8
            os: linux
          - platform: linux-arm32
            arch: arm32v7
            os: linux
          - platform: linux-x64
            arch: x86_64
            os: linux
          - platform: linux-x86
            arch: i686
            os: linux
    name: ${{ matrix.platform }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        env:
          USE_R2_MIRROR: 1
        run: |
          set -euxo pipefail
          find . -type f -name "*.sh" -exec chmod +x {} \;

          cd build
          echo "Downloading Linux System Root."
          ARCH=${{ matrix.arch }} scripts/sysrootDownload.sh

          echo "Building container."
          export IMAGE_NAME="tmbasic-build-env"
          export BUILD_ONLY=1
          ./${{ matrix.platform }}.sh

          echo "Exporting container to tarball."
          docker save "$IMAGE_NAME" | gzip -c > "../tmbasic-build-env-${{ matrix.platform }}.tar.gz"

      - name: Upload environment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: tmbasic-build-env-${{ matrix.platform }}-*.tar.gz

  build-win:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - platform: win-arm64
          - platform: win-x64
          - platform: win-x86
    name: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: |
          $ErrorActionPreference = "Stop"

          Write-Host "Building environment."
          build\${{ matrix.platform }}.ps1 -BuildDeps -BuildType Release -UseR2Mirror

          Write-Host "Archiving environment."
          $filename = "tmbasic-build-env-${{ matrix.platform }}.zip"
          Compress-Archive -Path "${{ matrix.platform }}", "win-native" -DestinationPath "$filename"

      - name: Upload environment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: tmbasic-build-env-${{ matrix.platform }}-*.zip

  build-mac:
    # Our build process requires an M1 Mac; it won't work on an Intel Mac.
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - platform: mac-arm64
            short_arch: arm64
          - platform: mac-x64
            short_arch: x64
    name: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        env:
          USE_R2_MIRROR: 1
        run: |
          set -euxo pipefail
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Installing GNU sed."
          brew install gnu-sed
          export PATH="$(brew --prefix)/opt/gnu-sed/libexec/gnubin:$PATH"

          echo "Building environment."
          pushd build
          ./${{ matrix.platform }}.sh
          popd

          echo "Archiving environment."
          export FILENAME=tmbasic-build-env-${{ matrix.platform }}.tar.gz
          tar zcf "$FILENAME" "mac-${{ matrix.short_arch }}"

      - name: Upload environment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: tmbasic-build-env-${{ matrix.platform }}-*.tar.gz

  upload:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Upload all artifacts to R2
        run: |
          set -euxo pipefail

          # Verify .tar.gz artifacts exist (Linux) and upload
          timestamp=$(date -u "+%Y%m%d%H%M%S")
          for platform in linux-arm64 linux-arm32 linux-x64 linux-x86; do
            if [ ! -f "tmbasic-build-env-${platform}.tar.gz" ]; then
              echo "Error: tmbasic-build-env-${platform}.tar.gz does not exist"
              exit 1
            fi

            aws s3 cp \
              --endpoint "$R2_ENDPOINT" \
              --checksum-algorithm CRC32 \
              "tmbasic-build-env-${platform}.tar.gz" \
              "s3://tmbasic-artifacts/linux-build-envs/tmbasic-build-env-${platform}-${timestamp}.tar.gz"
          done

          # Verify .zip artifacts exist (Windows) and upload
          for platform in win-arm64 win-x64 win-x86; do
            if [ ! -f "tmbasic-build-env-${platform}.zip" ]; then
              echo "Error: tmbasic-build-env-${platform}.zip does not exist"
              exit 1
            fi

            aws s3 cp \
              --endpoint "$R2_ENDPOINT" \
              --checksum-algorithm CRC32 \
              "tmbasic-build-env-${platform}.zip" \
              "s3://tmbasic-artifacts/win-build-envs/tmbasic-build-env-${platform}-${timestamp}.zip"
          done

          # Verify .zip artifacts exist (macOS) and upload
          for platform in mac-arm64 mac-x64; do
            if [ ! -f "tmbasic-build-env-${platform}.zip" ]; then
              echo "Error: tmbasic-build-env-${platform}.zip does not exist"
              exit 1
            fi

            aws s3 cp \
              --endpoint "$R2_ENDPOINT" \
              --checksum-algorithm CRC32 \
              "tmbasic-build-env-${platform}.zip" \
              "s3://tmbasic-artifacts/mac-build-envs/tmbasic-build-env-${platform}-${timestamp}.zip"
          done

          # Print all the filenames
          ls -l

      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            linux-arm64
            linux-arm32
            linux-x64
            linux-x86
            win-arm64
            win-x64
            win-x86
